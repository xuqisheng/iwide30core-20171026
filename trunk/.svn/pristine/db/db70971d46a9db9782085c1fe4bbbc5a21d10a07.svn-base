<?php
class Roomservice_Goods_Model extends MY_Model{
	function __construct() {
		parent::__construct ();
	}

	const TAB_GOODS = 'roomservice_goods';

	public function get_resource_name()
	{
		return 'Roomservice_Goods_Model';
	}

	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

	/**
	 * @return string the associated database table name
	 */
	public function table_name()
	{
		return self::TAB_GOODS;
	}

	public function table_primary_key()
	{
		return 'id';
	}

    /**
     * 获取某一页的数据，同时返回记录总数
     * @access 	public
     * @return 	int
     */
    public function get_page(array $filter,  $page, $page_size, $order_by=array()){
        $where= $this->gen_where_sql($filter);
        $count = $this->get_count($filter, $where);
        $list = $this->get_list($filter, $page, $page_size,  $order_by,$where);
        return array($count, $list);
    }

    /**
     * 获取指定条件的记录总数
     * @access 	public
     * @return 	int
     */
    public function get_count($filter = NULL, $where = NULL) {
        //条件
        if($where === NULL) $where = empty($filter) ? '' : $this->gen_where_sql($filter);
        if( ! empty($where)) $where = ' where ' . $where;
        //查询
        $sql = 'select count(*) as c from ' . $this->_db('iwide_r1')->dbprefix ( self::TAB_GOODS ) .' a ' . $where;
        $row = $this->_db('iwide_r1')->query($sql)->row_array();
        //返回
        return $row['c'];
    }

    /**
     * 获取指定条件的记录列表
     * @access 	public
     * @return 	int
     */
    public function get_list(array $filter = NULL, $page = 0, $page_size = 0, array $order_by = NULL,$where = NULL){
        //条件
        if($where === NULL) $where = empty($filter) ? '' : $this->gen_where_sql($filter);
        if( ! empty($where)) $where = ' where ' . $where;
        //排序
        $order_by = empty($order_by) ? (' order by goods_id desc') : (' order by ' . $this->gen_order_by_sql($order_by));
        //分页
        $limit = $this->gen_limit($page, $page_size);
        //查询
        //$sql  = 'select * from ' . $this->db->dbprefix ( self::TAB_GOODS ) . $where . $order_by . $limit;
        $sql = "select a.*,b.group_name,b.sort_order as group_sort_order from iwide_roomservice_goods a left join iwide_roomservice_goods_group b on a.inter_id = b.inter_id and a.group_id = b.group_id" . $where.$order_by.$limit;
        $arr = $this->_db('iwide_r1')->query($sql)->result_array();
        //返回
        return $arr;
    }
    /**
     * 创建查询条件sql语句
     * @access 	public
     * @param 	array	$filter 需要操作的数组
     * @return 	string
     */
    public function gen_where_sql($filter){
        $arr_where = array();
        if(isset($filter['inter_id']) && $filter['inter_id']){
            $arr_where[] = "a.inter_id='{$filter['inter_id']}'";
        }
        if(isset($filter['hotel_id']) && $filter['hotel_id']){
            if(is_array($filter['hotel_id'])){
                $arr_where[] = "a.hotel_id in (".implode(',',$filter['hotel_id']).")";
            }else{
                $arr_where[] = "a.hotel_id in ({$filter['hotel_id']})";
            }
        }
        if(isset($filter['sale_type'])){
            $arr_where[] = "a.sale_type IN({$filter['sale_type']})";
        }
        if(isset($filter['shop_id']) && $filter['shop_id']>0){
            $arr_where[] = "a.shop_id={$filter['shop_id']}";
        }
        if(isset($filter['sale_status']) && $filter['sale_status']>0){
            $arr_where[] = "a.sale_status={$filter['sale_status']}";
        }
        if(isset($filter['group_id']) && $filter['group_id']>0){
            $arr_where[] = "a.group_id={$filter['group_id']}";
        }
        if(isset($filter['wd']) && $filter['wd']){
            $arr_where[] = "a.goods_name like '%{$filter['wd']}%'";
        }
        return empty($arr_where) ? '' : implode(' and ', $arr_where);
    }

    /**
     * 创建排序sql语句
     * @access 	public
     * @param 	array	$data 需要操作的数组
     * @return 	string
     */
    public function gen_order_by_sql($data){
        $arr_order_by = '';
        foreach($data as $k=>$v){
            //需要在字段前加表别名的，在这里写代码判断
            $arr_order_by[] = $k . ' ' . $v;
        }
        return empty($arr_order_by) ? '' : implode(', ', $arr_order_by);
    }

    /**
     * 取得列表限定记录数
     * @access 	public
     * @param   string		$page 当前页数
     * @param   boolean		$page_size	偏移量
     * @return  string		拼装的sql语句
     */
    public function gen_limit($page, $page_size){
        $page = intval($page);
        $page_size = intval($page_size);
        return $page_size > 0 ? (' limit ' . max(0, ($page-1)*$page_size) . ', ' . max(1, $page_size)) : '';
    }

    //获取商品信息：前台
    //$filter: 条件数组
    public function get_front_goods_list($filter = array() , $orderby = ""){
        if(!isset($filter['inter_id'])){
            return false;
        }
        $sql = "select goods_id,goods_name,inter_id,hotel_id,shop_id,group_id,sale_status,shop_price,stock,is_show_stock,goods_img,is_recommend,sort_order,sale_now,sale_time,add_time,is_delete,spec_list,goods_desc,sale_start_time,sale_end_time
                from iwide_roomservice_goods where inter_id = '{$filter['inter_id']}' ";
        //$sql = "select a.goods_id,a.goods_name,a.inter_id,a.hotel_id,a.shop_id,a.group_id,a.sale_status,a.shop_price,a.stock,a.is_show_stock,a.goods_img,a.is_recommend,a.sort_order,a.sale_now,a.sale_time,a.add_time,a.is_delete,a.spec_list from iwide_roomservice_goods a where a.inter_id = '{$filter['inter_id']}' ";
        if(isset($filter['shop_id']) && $filter['shop_id'] > 0){
            $sql .= " and shop_id = {$filter['shop_id']}";
        }
        if(isset($filter['is_delete'])){
            $sql .= " and is_delete = {$filter['is_delete']}";
        }
        if(isset($filter['is_recommend']) && !empty($filter['is_recommend'])){
            $sql .= " and is_recommend = {$filter['is_recommend']}";
        }
        if(isset($filter['group_id']) && $filter['group_id'] > 0){
            $sql .= " and group_id = {$filter['group_id']}";
        }
        if(isset($filter['in_group_id'])){
            $sql .= " and group_id in (". implode(',',$filter['group_id']) . ")";
        }
        //上下架判断
        if(isset($filter['sale_now'])){
            //新需求：定时开售时，只展示商品，加入购物车和选规格的按钮不可点击
            $curtime = date('H:i');//AND sale_start_time <= '{$curtime}' AND sale_end_time > '{$curtime}')
            $sql .= " and (sale_now = {$filter['sale_now']} OR sale_now = 2 )";
        }
        if(empty($orderby)){
            $sql .= " order by sort_order asc";
        }else{
            $sql .= $orderby;
        }
        $res = $this->_db('iwide_r1')->query ($sql)->result_array ();
        return $res;
    }

    //获取商品信息
    //$filter:条件数组
    //$goods_info:前台传的下单数据结构  $goods_Ids ：商品数组ID
    public function get_order_goods_info($filter = array(),$goods_info = array(),$goods_ids = array()){
        if(!empty($goods_info) && !empty($goods_ids)){
            $sql = "select * from " . $this->_db('iwide_r1')->dbprefix ( self::TAB_GOODS ) . " where goods_id in (" . implode(',',$goods_ids) . ") and inter_id = '{$filter['inter_id']}' and hotel_id = {$filter['hotel_id']} and shop_id = {$filter['shop_id']} and is_delete = 0 and sale_status = 1";
            $result = $this->_db('iwide_r1')->query ($sql)->result_array ();
            $goods_res = $goods_spec_res = array();
            if($result){
                $sql = "select * from iwide_roomservice_spec_setting where inter_id = '{$filter['inter_id']}' and goods_id in (" . implode(',',$goods_ids) . ")";
                $goods_spec_data = $this->_db('iwide_r1')->query ($sql)->result_array ();
                if(!empty($goods_spec_data)){
                    foreach($goods_spec_data as $sk=>$sv){
                        $goods_spec_res[$sv['setting_id']] = $sv;
                    }
                }
                foreach($result as $k=>$v){

                    $curtime = date('H:i');

                    if($v['sale_now'] ==3 || ($v['sale_now'] == 2 && ($v['sale_start_time'] > "{$curtime}" || $v['sale_end_time'] < "{$curtime}" ) ) ||$v['sale_status'] ==2){//定时开售
                        unset($result[$k]);//过滤还没开售商品或者售罄的
                        continue;
                    }
                    $goods_res[$v['goods_id']] = $v;
                }
                foreach($goods_info as $gk=>$gv){
                    if(!isset($goods_res[$gv['goods_id']])){
                        unset($goods_info[$gk]);
                        continue;
                    }
                    $goods_info[$gk]['setting_id'] = 0;
                    $goods_info[$gk]['spec_name'] = '';
                    $goods_info[$gk]['inter_id'] = $filter['inter_id'];
                    $goods_info[$gk]['shop_id'] = $filter['shop_id'];
                    $goods_info[$gk]['hotel_id'] = $filter['hotel_id'];
                    $goods_info[$gk]['goods_id'] = $gv['goods_id'];
                    $goods_info[$gk]['goods_name'] = $goods_res[$gv['goods_id']]['goods_name'];
                    $goods_info[$gk]['stock'] = $goods_res[$gv['goods_id']]['stock'];
                    $goods_info[$gk]['shop_price'] = $goods_res[$gv['goods_id']]['shop_price'];
                    //门票提前预约优惠字段
                    $goods_info[$gk]['ticket_credits'] = $goods_res[$gv['goods_id']]['ticket_credits'];
                    $goods_info[$gk]['ticket_day'] = $goods_res[$gv['goods_id']]['ticket_day'];
                    $goods_info[$gk]['ticket_style'] = $goods_res[$gv['goods_id']]['ticket_style'];
                    $goods_info[$gk]['ticket_limit'] = $goods_res[$gv['goods_id']]['ticket_limit'];
                    $goods_info[$gk]['is_discount'] = $goods_res[$gv['goods_id']]['is_discount'];

                    //改成批量获取
                    if(!empty($gv['spec_id']) && !empty($gv['admin_setting_id'])){
                        $goods_info[$gk]['stock'] = !empty($goods_spec_res[$gv['admin_setting_id']])?$goods_spec_res[$gv['admin_setting_id']]['spec_stock']:0;
                        $goods_info[$gk]['shop_price'] = !empty($goods_spec_res[$gv['admin_setting_id']])?$goods_spec_res[$gv['admin_setting_id']]['spec_price']:0;
                        $goods_info[$gk]['spec_id'] = $gv['spec_id'];
                        $goods_info[$gk]['setting_id'] = !empty($goods_spec_res[$gv['admin_setting_id']])?$goods_spec_res[$gv['admin_setting_id']]['setting_id']:0;
                        //组装规格名称
                        $spec_list_info = json_decode($goods_res[$gv['goods_id']]['spec_list'], true);
                        $spec_type_name = $spec_list_info['spec_type'];
                        $spec_name = !empty($goods_spec_res[$gv['admin_setting_id']])&&!empty($goods_spec_res[$gv['admin_setting_id']]['setting_spec_compose'])&&current(json_decode($goods_spec_res[$gv['admin_setting_id']]['setting_spec_compose'],true))?current(json_decode($goods_spec_res[$gv['admin_setting_id']]['setting_spec_compose'],true)):'';
                        $product_spec_name = array();
                        foreach ($spec_type_name as $key => $type_name) {
                            $product_spec_name[] = $type_name . ':' . $spec_name['spec_name'][$key];
                        }
                        $goods_info[$gk]['spec_name'] = implode(',',$product_spec_name);
                    }
                }
            }else{
                //无商品信息
                $this->write_log($goods_info,'查询无商品数据','');
                return false;
            }

        }
        return empty($goods_info)?'':$goods_info;
    }

    //插入商品数据 更新对应店铺 分组商品数量
    public function save_goods_data($data = array()){
        $this->db->trans_begin();
        $res = $this->db->insert($this->db->dbprefix ( self::TAB_GOODS ),$data);
        $goods_id = $this->db->insert_id();
        if(!empty($data['spec_list'])){
            //更新goods表
           // $this->db->update('roomservice_goods',array('spec_list'=>$data['spec_list']),array('goods_id'=>$goods_id));

            $spec_list = json_decode( $data['spec_list'], true );
            $spec_data = $spec_list['data'];
            $spec_setting_data = array();
            $all_stock = 0;
            if(!empty($spec_data)){
                foreach($spec_data as $k=>$v){
                    $arr = array();
                    $arr['inter_id'] = $data['inter_id'];
                    $arr['hotel_id'] = $data['hotel_id'];
                    $arr['shop_id'] = $data['shop_id'];
                    $arr['goods_id'] = $goods_id;
                    $arr['setting_spec_compose'] = json_encode( array($k=>$v) );
                    $arr['spec_id'] = $v['setting_id'];
                    $arr['spec_price'] = $v['specprice'];
                    $arr['spec_stock'] = $v['stock'];
                    $arr['outter_sku'] = $v['sku'];
                    $all_stock += $v['stock'];
                    $spec_setting_data[] = $arr;
                }
                //更新goods表库存
                $this->db->update('roomservice_goods',array('stock'=>$all_stock),array('inter_id'=>$data['inter_id'],'goods_id'=>$goods_id));
                //更新spec表
                $this->db->insert_batch('iwide_roomservice_spec_setting',$spec_setting_data);
            }
        }
       //更新店铺商品数量 分组数量
        $shop_goods_num =$this->db->get_where('roomservice_goods',
                            array( 'inter_id'=>$data['inter_id'],
                                    'shop_id'=>$data['shop_id'],
                                   'is_delete'=>0))
                             ->num_rows();
        //更新
       $shop_update = $this->db->update('roomservice_shop',

                            array('goods_num'=>$shop_goods_num),
                            array(
                                'inter_id' => $data['inter_id'],
                                'shop_id' => $data['shop_id']
                            ));
        //查询对应分组商品信息
        $group_goods_nm = $this->db->get_where('roomservice_goods',
                            array( 'inter_id'=>$data['inter_id'],
                                    'shop_id'=>$data['shop_id'],
                                    'group_id'=> $data['group_id'],
                                    'is_delete'=>0))
                            ->num_rows();
        //更新
        $group_update = $this->db->update('roomservice_goods_group',
                            array('goods_num'=>$group_goods_nm),
                            array(
                                 'inter_id' => $data['inter_id'],
                                 'shop_id' => $data['shop_id'],
                                 'group_id'=> $data['group_id'],
                             ));
        if($res && $shop_update && $group_update){
            //成功
            //return true;
        }else{
            $this->db->trans_rollback ();

            return false;
        }
        if ($this->db->trans_status () === FALSE) {
            $this->db->trans_rollback ();

            return false;
        }else{
            $this->db->trans_commit();
            return $goods_id;
        }
    }

    //更新商品数据 更新对应店铺 分组商品数量
    public function update_goods_data($data = array(),$goods_id = 0,$ori_spec_List = ''){
        //查询原来的
        $ori_data = $this->_db('iwide_r1')->where(array('inter_id'=>$data['inter_id'],'goods_id'=>$goods_id))->get($this->db->dbprefix ( self::TAB_GOODS ))->row_array();
        $this->db->trans_begin();
        $save_res = $this->db->update($this->db->dbprefix ( self::TAB_GOODS ),$data,array('inter_id'=>$data['inter_id'],'goods_id'=>$goods_id));
        $spec_setting_data = $update_spec_setting_data = $delete_spec_setting_data = array();
        $check_add = $check_update = $check_delete = $result_add = $result_update = $result_delete = FALSE;
        $note = '修改信息:';
        if(!empty($data['spec_list'])){
            //更新goods表
            // $this->db->update('roomservice_goods',array('spec_list'=>$data['spec_list']),array('goods_id'=>$goods_id));
            $spec_list = json_decode( $data['spec_list'], true );
            $spec_data = $spec_list['data'];
            $spec_setting_data  = array();
            if(!empty($spec_data)){
                foreach($spec_data as $k=>$v){
                    $setting_spec_compose = json_encode( array($k=>$v) );
                    if(isset($v['admin_setting_id']) && !empty($v['admin_setting_id'])){
                        //更新操作
                        if(isset($ori_spec_List[$v['admin_setting_id']]) && !empty($ori_spec_List[$v['admin_setting_id']]) ){
                            if( $setting_spec_compose == $ori_spec_List[$v['admin_setting_id']]['setting_spec_compose']){//相同说明没编辑过

                            }else{
                                $array = array();
                                $array['setting_spec_compose'] = json_encode( array($k=>$v) );
                                $array['spec_price'] = $v['specprice'];/*规格价格*/
                                $array['spec_stock'] = $v['stock'];/*规格价格*/
                                $array['outter_sku'] = $v['sku'];/*规格价格*/
                                $update_spec_setting_data[$v['admin_setting_id']] = $array;
                            }
                            unset($ori_spec_List[$v['admin_setting_id']]);//删除掉需要更新的，剩下就是要删除的
                        }else{
                            //不知道规格ID 不处理
                        }
                    }else{//规格添加操作
                        //规格添加操作
                        $array = array();
                        $array['inter_id'] = $data['inter_id'];
                        $array['hotel_id'] = $data['hotel_id'];
                        $array['shop_id'] = $data['shop_id'];
                        $array['goods_id'] = $goods_id;
                        $array['setting_spec_compose'] = json_encode( array($k=>$v) );
                        $array['spec_id'] = $k;
                        $array['spec_price'] = $v['specprice'];/*规格价格*/
                        $array['spec_stock'] = $v['stock'];/*规格价格*/
                        $array['outter_sku'] = $v['sku'];/*规格价格*/
                        $spec_setting_data[] = $array;
                    }
                }
                //需要删除的
                $delete_spec_setting_data = $ori_spec_List;
                if(!empty($spec_setting_data)){//新增的
                    //添加操作
                    $check_add = TRUE;
                    $this->db->insert_batch('iwide_roomservice_spec_setting',$spec_setting_data);
                    $note = '|新增规格信息：' . json_encode($spec_setting_data);
                    if($this->db->affected_rows()>0){
                        $result_add = true;
                    }else{
                        $result_add = false;
                    }
                }
                if(!empty($update_spec_setting_data)){//更新的
                    //更新操作
                    $check_update = TRUE;
                    $note = '|更新规格信息：' . json_encode($update_spec_setting_data);
                    foreach($update_spec_setting_data as $uk=>$uv){
                        if(!empty($uk) && !empty($uv)){
                            $where = array();
                            $where['goods_id'] = $goods_id;
                            $where['inter_id'] = $data['inter_id'];
                            $where['setting_id'] = $uk;
                            $this->db->where($where)->limit(1)->update('iwide_roomservice_spec_setting',$uv);
                            if($this->db->affected_rows()==1){
                                $result_update = true;
                            }else{
                                $result_update = false;
                                break;//有失败的就推出 回滚
                            }
                        }else{
                            $result_update = false;
                            break;//有失败的就推出 回滚
                        }
                    }
                }
                //删除的
                if(!empty($delete_spec_setting_data)){
                    //删除操作
                    $check_delete = TRUE;
                    $note = '|删除规格信息：' . json_encode($delete_spec_setting_data);
                    foreach($delete_spec_setting_data as $dk=>$dv){
                        if(!empty($dv)){
                            $where = array();
                            $where['goods_id'] = $goods_id;
                            $where['inter_id'] = $data['inter_id'];
                            $where['setting_id'] = $dk;
                           $this->db->where($where)->limit(1)->delete('iwide_roomservice_spec_setting');
                            if($this->db->affected_rows()==1){
                                $result_delete = true;
                            }else{
                                $result_delete = false;
                                break;//有失败的就推出 回滚
                            }
                        }else{
                            $result_delete = false;
                            break;
                        }
                    }
                }

            }
        }

        if($ori_data['stock'] != $data['stock']){//库存改变
            $note .= " 库存改变,由{$ori_data['stock']} 改为 {$data['stock']}";
        }
        /*if($ori_data['sale_status'] != $data['sale_status']){
            $note .= " 上架状态改变,由{$ori_data['sale_status']} 改为 {$data['sale_status']}";
        }*/
        if($ori_data['sale_now'] != $data['sale_now']){//售货时间改变
            $note .= " 开售时间改变,由{$ori_data['sale_now']} 改为 {$data['sale_now']} ,时间为：{$ori_data['sale_time']}";
        }
        $note .= " 原来数据： " . json_encode($ori_data) . ' | 更新的信息：' . json_encode($data);
        $goods_log = array(
            'inter_id' => $data['inter_id'],
            'hotel_id' => $data['hotel_id'],
            'shop_id'  => $data['shop_id'],
            'goods_id' => $goods_id,
            'log_type' => 1,//编辑类型
            'note'     => $note,
            'log_time' => date('Y-m-d H:i:s'),
            'admin_id' =>  $this->session->userdata ( 'admin_profile' )['admin_id'],
            'operation'=>  $this->session->userdata ( 'admin_profile' )['username'],
        );

        if($save_res){//保存成功
            if( $check_add ){
                if( !$result_add ){
                    $this->db->trans_rollback();
                    return FALSE;
                }
            }
            if( $check_update ){
                if( !$result_update ){
                    $this->db->trans_rollback();
                    return FALSE;
                }
            }
            if( $check_delete ){
                if( !$result_delete ){
                    $this->db->trans_rollback();
                    return FALSE;
                }
            }
        }else{
            $this->db->trans_rollback();
            return false;
        }

        if ($this->db->trans_status() === FALSE) {
            $this->db->trans_rollback();
            return FALSE;
        } else {
            $this->db->insert('roomservice_goods_log',$goods_log);
            $this->db->trans_commit();
            return TRUE;
        }
    }

    //扣减库存
    public function reduce_item_stock($goods_info = array()){
        if(empty($goods_info)){
            return false;
        }
        $db = $this->db;
        $reduce_mapping= array();
        foreach($goods_info as $k=>$gv){
            $num= ($gv['num']<1)? 1: intval($gv['num']);
            $goods_arr = array();
            $goods_arr['goods_id'] = $gv['goods_id'];
            $goods_arr['num'] = $num;
            $goods_arr['setting_id'] = !empty($gv['setting_id'])?$gv['setting_id']:0;
            $goods_arr['spec_id'] = !empty($gv['spec_id'])?$gv['spec_id']:'';
            $reduce_mapping[]= $goods_arr;

        }
        if(!empty($reduce_mapping)){
            foreach($reduce_mapping as $k=>$v){
                if($v['num'] > 0){
                    if(empty($v['spec_id'])){//无规格
                        $sql = "update " . $db->dbprefix ( self::TAB_GOODS ) . " set `stock`=`stock`-{$v['num']} where `goods_id`={$v['goods_id']} and `stock`>={$v['num']}";
                        $res = $db->query ($sql);
                        if($db->affected_rows() != 1) {
                            $this->write_log($v,'更新失败',$sql);
                            return false;//库存不足
                        }
                    }else{//有规格
                        if(!$this->_reduce_item_spec_stock($v['goods_id'],$v['spec_id'],$v['setting_id'],$v['num'])){
                            return false;
                        }
                    }
                    //更新销量‘
                    $sql = "update " . $db->dbprefix ( self::TAB_GOODS ) . " set `sale_num`=`sale_num`+{$v['num']} where `goods_id`={$v['goods_id']}";
                    $res = $db->query ($sql);
                    if($db->affected_rows() != 1) {
                        return false;//更新失败
                    }
                    //查询库存 无库存则更新为售罄状态 这一步先放这里
                    $sql = "select stock from iwide_roomservice_goods where goods_id = {$v['goods_id']}";
                    $stock_res = $db->query ($sql)->row_array();
                    if($stock_res['stock'] == 0){
                        $sql = "update iwide_roomservice_goods set sale_status = 2 where goods_id = {$v['goods_id']} and stock <=0";
                        $res = $db->query ($sql);
                        if($db->affected_rows() != 1) {
                            return false;//更新失败
                        }
                    }
                }
            }
            return true;
        }
    }

    //扣减 还原多规格的库存处理
    protected function _reduce_item_spec_stock($goods_id,$spec_id,$setting_id,$num,$action = 'reduce') {
        if($action == 'reduce'){//减
            $sql = "update iwide_roomservice_spec_setting set spec_stock = spec_stock - {$num} where goods_id = {$goods_id} and  setting_id= {$setting_id} and spec_stock >= {$num}";
            //$sql = "update iwide_roomservice_spec_setting set spec_stock = spec_stock - {$num} where goods_id = {$goods_id} and  spec_id= {$spec_id}";
        }elseif($action == 'add'){///恢复库存
            $sql = "update iwide_roomservice_spec_setting set spec_stock = spec_stock + {$num} where goods_id = {$goods_id} and  setting_id= {$setting_id}";
            //$sql = "update iwide_roomservice_spec_setting set spec_stock = spec_stock + {$num} where goods_id = {$goods_id} and  spec_id= {$spec_id}";
        }
        $res = $this->db->query($sql);
        if($this->db->affected_rows() != 1){
            $this->write_log($goods_id,'多规格库存变化',$action.':'.$sql);
            return false;//库存不足
        }
        //更新规格信息 start
        /*$sql = "select * from iwide_roomservice_spec_setting where goods_id = {$goods_id} and setting_id = {$setting_id}";
        //$sql = "select * from iwide_roomservice_spec_setting where goods_id = {$goods_id} and spec_id= {$spec_id}";
        $spec = $this->db->query($sql)->row_array();
        $tmp_spec = json_decode($spec['setting_spec_compose'],true);
        $tmp_spec[$spec_id]['stock'] = $spec['spec_stock'];
        $spec['setting_spec_compose'] = json_encode($tmp_spec);
        $this->db->update('iwide_roomservice_spec_setting',$spec,array('goods_id'=>$goods_id,'setting_id'=>$setting_id));
        if($this->db->affected_rows() != 1){
            return false;//更新失败
        }*/
        //end
        //更新总的库存
        if($this->update_all_stock($goods_id)){
            return true;
        }else{
            return false;
        }
    }
    //更新总的库存
    public function update_all_stock($goods_id){
        //先查询总的多规格库存
        $sql = "select sum(spec_stock) as stock from iwide_roomservice_spec_setting where goods_id = {$goods_id}";
        $res = $this->db->query($sql)->row_array();
        $stock = $res['stock'];
        $sql = "update iwide_roomservice_goods set stock = {$stock} where goods_id = {$goods_id}";
        $res = $this->db->query($sql);
        if($this->db->affected_rows() != 1){
            $this->write_log($goods_id,'多规格更新总库存',$sql);
            return false;
        }
        return true;
    }

    //订单取消 还原库存
    //$goods : 订单商品信息
    public function roback_goods_stock($goods = array()){
        if(empty($goods)){
            return false;
        }
        $db = $this->db;
        $reduce_mapping= array();
        foreach($goods as $k=>$v){
            $num= ($v['goods_num']<1)? 1: intval($v['goods_num']);
            $last = $num;
            if (isset($v['refund_num']))
            {
                $last = intval($num - $v['refund_num']);
            }

            $goods_arr = array();
            $goods_arr['num'] = $last;
            $goods_arr['goods_id'] = $v['goods_id'];
            $goods_arr['setting_id'] = $v['setting_id'];
            $goods_arr['spec_id'] = $v['spec_id'];
            //$reduce_mapping[$v['goods_id']]['num']= $num;
            $reduce_mapping[]= $goods_arr;
        }
        if(!empty($reduce_mapping)){
            foreach($reduce_mapping as $k=>$v){
                if($v['num'] > 0){
                    if(!empty($v['setting_id'])){//有规格
                        //先查下该规格是否还存在
                        $sql = "select count(*) c from iwide_roomservice_spec_setting where goods_id = {$v['goods_id']} and setting_id = {$v['setting_id']}";
                        $count = $db->query ($sql)->row_array()['c'];
                        if($count){//存在 允许退库存
                            if(!$this->_reduce_item_spec_stock($v['goods_id'],$v['spec_id'],$v['setting_id'],$v['num'],'add')){
                                return false;
                            }
                        }else{
                            $this->write_log($v,'该规格已经不存在',$sql);
                            continue;//原来规格已经改变了
                        }
                    }else{
                        $sql = "update " . $db->dbprefix ( self::TAB_GOODS ) . " set `stock`=`stock`+{$v['num']} where `goods_id`={$v['goods_id']}";
                        $res = $db->query ($sql);
                        if($db->affected_rows() != 1) {
                            $this->write_log($v,'无规格更新失败',$sql);
                            return false;//更新失败
                        }
                    }
                    //更新销量‘
                    $sql = "update " . $db->dbprefix ( self::TAB_GOODS ) . " set `sale_num`=`sale_num`-{$v['num']} where `goods_id`={$v['goods_id']} and sale_num >={$v['num']}";
                    $res = $db->query ($sql);
                    if($db->affected_rows() != 1) {
                        return false;//更新失败
                    }
                    //查询库存 无库存则更新为售罄状态 这一步先放这里
                    $sql = "select stock from iwide_roomservice_goods where goods_id = {$v['goods_id']} and sale_status = 2";
                    $stock_res = $db->query ($sql)->row_array();
                    if(!empty($stock_res) && $stock_res['stock'] > 0){
                        $sql = "update iwide_roomservice_goods set sale_status = 1 where goods_id = {$v['goods_id']} and stock >0";
                        $res = $db->query ($sql);
                        if($db->affected_rows() != 1) {
                            return false;//更新失败
                        }
                    }
                }
            }
            return true;
        }
    }

    private function write_log( $data,$re = '',$result = '',$file=NULL, $path=NULL )
    {
        if(!$file) $file= date('Y-m-d'). '.txt';
        if(!$path) $path= APPPATH. 'logs'. DS. 'roomservice'. DS;

        if( !file_exists($path) ) {
            @mkdir($path, 0777, TRUE);
        }

        if(is_array($data)){
            $data=json_encode($data);
        }
        if(is_array($result)){
            $result=json_encode($result);
        }
        $fp = fopen($path.$file, "a");
        $content = date("Y-m-d H:i:s")." | ".getmypid()." | ".$_SERVER['PHP_SELF']." | ".session_id()." | ".$data." | ".$re." | ".$result."\n";

        fwrite($fp, $content);
        fclose($fp);
    }
    /*
     * 查询商品信息
     * */
    public function get_goods_info($filter = array()){
        if (isset($filter['sale_now']) && $filter['sale_now'] == 1)
        {
            $this->_db('iwide_r1')->where_in('sale_now',array(1,2));
            unset($filter['sale_now']);
        }

        $res = $this->_db('iwide_r1')->where($filter)->order_by('sort_order','desc')->get('roomservice_goods')->result_array();
        return $res;
    }


    /**
     * 更新库存
     * @param $data 更改的数据
     * @param $where 条件
     * @return mixed
     */
    public function update_data($data,$where)
    {
        if (!empty($data))
        {
            foreach ($data as $key => $value)
            {
                $this->db->set($key, $value, ($key == 'stock' || $key == 'sale_num') ? false : true);
            }

            $this->db->where($where);
            $this->db->update(self::TAB_GOODS);
            return $this->db->affected_rows();
        }
    }

    /**
     * 更改预约核销商品
     */
    public function update_ticket_goods($data,$where)
    {
        $res = array(
            'data' => 0,
            'rows' => 0,
        );
        if (!empty($data))
        {
            $this->db->where($where);
            $res['data'] = $this->db->update(self::TAB_GOODS,$data);
            $res['rows'] = $this->db->affected_rows();
        }

        return $res;
    }

    /**
     * 核销订单
     * @param array $filter
     * @param array $goods_info
     * @param array $goods_ids
     * @return array|bool|string
     */
    public function ticket_order_goods_info($filter = array(),$goods_info = array(),$goods_ids = array())
    {
        if(!empty($goods_info) && !empty($goods_ids))
        {
            $sql = "select * from " . $this->_db('iwide_r1')->dbprefix(self::TAB_GOODS) . " where goods_id in (" . implode(',',$goods_ids) . ") and inter_id = '{$filter['inter_id']}' and hotel_id = {$filter['hotel_id']} and shop_id = {$filter['shop_id']} and is_delete = 0 and sale_status = 1";
            $result = $this->_db('iwide_r1')->query ($sql)->result_array();
            $goods_res = $goods_spec_res = array();
            if($result)
            {
                foreach($result as $k=>$v)
                {
                    $curtime = date('H:i');

                    if($v['sale_now'] ==3 || ($v['sale_now'] == 2 && ($v['sale_start_time'] > "{$curtime}" || $v['sale_end_time'] < "{$curtime}" ) ) ||$v['sale_status'] == 2)
                    {
                        //定时开售
                        unset($result[$k]);//过滤还没开售商品或者售罄的
                        continue;
                    }
                    $goods_res[$v['goods_id']] = $v;
                }

                $this->load->model('roomservice/roomservice_ticket_dateprice_model');
                foreach($goods_info as $gk=>$gv)
                {
                    if(!isset($goods_res[$gv['goods_id']]))
                    {
                        unset($goods_info[$gk]);
                        continue;
                    }

                    //查询规格
                    $where = array(
                        'goods_id'  => $gv['goods_id'],
                        'spu_id'    => $gv['spec_id'],
                        'date'      => $filter['date'],
                    );
                    $dateprice = $this->roomservice_ticket_dateprice_model->get_one_info($where);

                    $goods_info[$gk]['setting_id'] = $gv['spec_id'];

                    $goods_info[$gk]['inter_id'] = $filter['inter_id'];
                    $goods_info[$gk]['shop_id'] = $filter['shop_id'];
                    $goods_info[$gk]['hotel_id'] = $filter['hotel_id'];
                    $goods_info[$gk]['goods_id'] = $gv['goods_id'];
                    $goods_info[$gk]['num'] = $gv['count'];
                    $goods_info[$gk]['goods_name'] = $goods_res[$gv['goods_id']]['goods_name'];
                    //价格日历
                    $goods_info[$gk]['stock'] = !empty($dateprice) ? $dateprice['goods_stock'] : 0;
                    $goods_info[$gk]['price'] = !empty($dateprice) ? $dateprice['goods_price'] : 0;
                    $goods_info[$gk]['shop_price'] = !empty($dateprice) ? $dateprice['goods_price'] : 0;
                    //门票提前预约优惠字段
                    $goods_info[$gk]['ticket_credits'] = $goods_res[$gv['goods_id']]['ticket_credits'];
                    $goods_info[$gk]['ticket_day'] = $goods_res[$gv['goods_id']]['ticket_day'];
                    $goods_info[$gk]['ticket_style'] = $goods_res[$gv['goods_id']]['ticket_style'];
                    $goods_info[$gk]['ticket_limit'] = $goods_res[$gv['goods_id']]['ticket_limit'];
                }
            }
            else
            {
                //无商品信息
                $this->write_log($goods_info,'查询无商品数据','');
                return false;
            }

        }
        return empty($goods_info) ? '' : $goods_info;
    }

    /**
     * 获取商品详情信息
     * author : 沙沙
     * date   : 2017-05-27
     * @param array $filter
     * @param string $select
     * @return mixed
     */
    public function get_goods_detail($filter = array(),$select = '*')
    {
        $res = $this->_db('iwide_r1')->select($select)->where($filter)->get(self::TAB_GOODS)->row_array();
        return $res;
    }


}
