<?php

class Test extends MY_Front_Member
{
    const SEND_URL = 'https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=';
 
    function test6()
    {
        ini_set('memory_limit',-1); //无内存限制
        set_time_limit(0); //无时间限制
        $dataset = $this->read_Excel('wyn.xlsx');
        $this->make_data($dataset, [
            'notnull' => [
                '2'
            ],
            'membership_number' => 2,
            'name' => 0,
            'phone' => 2,
            'credit' =>4,
            'balance'=>3,
            'sex'=>1,
        ], 'a493027202', true);
        
        exit();
    }
    
    function test7 (){
        //预组装发送模板消息的数据
        $message = [];
        $message['template_id'] = 'eJbLx0UlgCLpRLLmvTecOd61wwW2sUYdhoxg3JcxM8A'; // 微信模版ID
        $message['url'] = 'http://hotels.iwide.cn/index.php/membervip/card?id=a487059597'; // url
        $message['data']['first'] = array(
            'value' => '您好，您的10元代金券5张已到账',
            'color' => '#000000'
        );
        $message['data']['remark'] = array(
            'value'=>'点击查看卡券详情',
            'color'=> '#000000'
        );
       
        $message['data']['keyword2'] = [
            'value' => '5'
        ];
        $message['data']['keyword3'] = [
            'value' => date('Y-m-d H:i:s')
        ];
        //预组装发送模板消息的数据  END
        //预组装发送礼包的数据
        $packge_url = INTER_PATH_URL.'package/give';
        $package_data = array(
            'token'=>'',
            'inter_id'=>'a487059597',
            'uu_code'=>uniqid(),
            'package_id'=>486,
            'card_rule_id'=>905
        );
        //预组装发送礼包的数据 END
        
        //获取用户数据
        $SQL="SELECT *  FROM `iwide_member_info` WHERE `inter_id` = 'a487059597'";    
        $this->load->model('membervip/admin/Public_model', 'pum');
        $member_info = $this->pum->_shard_db()
        ->query($SQL)
        ->result_array();
        //用户数据ready
        
        foreach ($member_info as $val ){
            $package_data['openid']=$val['open_id'];
            var_dump($package_data);
            $package_res = $this->doCurlPostRequest( $packge_url , $package_data );//发送礼包
            
            $message['touser'] =$val['open_id']; // 发送给哪个用户
            $message['data']['keyword1'] = [
                'value' => $val['name']
            ];
            $json_data = @json_encode($message);
            var_dump($json_data);
            $sendResult = $this->request_send_template('a487059597', $json_data); // 发送模板消息
            
        }
      
         }
    
    /**
     * 读取Excel表格内容，返回数组
     *
     * @param
     *            path 文件名，iwide3_0下存放的excel文件
     * @param
     *            array
     */
    function read_Excel($path, $excel_type = 'Excel2007')
    {
        $this->load->library('PHPExcel/IOFactory');
        $objPHPExcel = IOFactory::createReader($excel_type);
        $data = $objPHPExcel->load(APPPATH . $path);
        $sheet = $data->getSheet(0);
        $highestRow = $sheet->getHighestRow();
        $highestColumm = $sheet->getHighestColumn();
        
        for ($row = 1; $row <= $highestRow; $row ++) { // 行数是以第1行开始
            for ($column = 'A'; $column <= $highestColumm; $column ++) { // 列数是以第0列开始
                $dataset[$row][] = $sheet->getCell($column . $row)->getValue();
            }
        }
        return $dataset;
    }

    /**
     * 组装数据 兼备插入数据库功能
     *
     * @param
     *            dataset 需要处理的数据
     * @param
     *            init 處理數據用的配置項
     * @param
     *            insert 是否需要插入數據庫
     * @return array
     */
    function make_data($dataset, $init, $inter = '', $insert = false)
    {
        $filtration = false;
        if (! empty($init['notnull'])) {
            // 如果此项有配置，则过滤不符合条件的记录
            $notnull = $init['notnull'];
            unset($init['notnull']);
            $filtration = true;
        }
        foreach ($dataset as $key => $val) {
            if ($filtration) {
                $continue = false;
                foreach ($notnull as $k => $v) {
                    if (empty($val[$v])) {
                        $continue = true;
                        break;
                    }
                }
                if ($continue) {
                    continue;
                }
            }
            foreach ($init as $e => $a) {
                if ($e=='sex'){
                    echo 1;
                    $newdata[$key][$e] = $val[$a]=='男'? 1:2;
                }else
                $newdata[$key][$e] = $val[$a];
            }
        }
        $this->load->model('membervip/admin/Public_model', 'pum');
        foreach ($newdata as $key => $val) {
            $data_db[$key]['inter_id'] = $inter;
            $data_db[$key]['pms_mark'] = $val['phone'];
            $data_db[$key]['type'] = 'member_info';
            $data_db[$key]['value'] = json_encode($val);
            $data_db[$key]['status'] = 1;
            if ($insert) {
                $res = $this->pum->_shard_db()->insert('temp_record', $data_db[$key]);
            }
        }
        echo '<pre>';
        print_r($data_db);
        exit();
    }
    
    /**
     * 封装curl的调用接口，post的请求方式
     * @param string URL
     * @param string POST表单值
     * @param array 扩展字段值
     * @param second 超时时间
     * @return 请求成功返回成功结构，否则返回FALSE
     */
    protected function doCurlPostRequest( $url , $post_data , $timeout = 5) {
        $requestString = http_build_query($post_data);
        if ($url == "" || $timeout <= 0) {
            return false;
        }
        $curl = curl_init();
        //设置抓取的url
        curl_setopt($curl, CURLOPT_URL, $url);
        //设置头文件的信息作为数据流输出
        curl_setopt($curl, CURLOPT_HEADER, false);
        //设置获取的信息以文件流的形式返回，而不是直接输出。
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        //設置請求數據返回的過期時間
        curl_setopt ( $curl, CURLOPT_TIMEOUT, ( int ) $timeout );
        //设置post方式提交
        curl_setopt($curl, CURLOPT_POST, true);
        //设置post数据
        curl_setopt($curl, CURLOPT_POSTFIELDS, $requestString);
        //执行命令
        $res = curl_exec($curl);
        //关闭URL请求
        curl_close($curl);
        //写入日志
        $log_data = array(
            'url'=>$url,
            'post_data'=>$post_data,
            'result'=>$res,
        );
        $this->api_write_log(serialize($log_data) );
        return json_decode($res,true);
    }
    
    /**
     * 把请求/返回记录记入文件
     * @param String $content
     * @param string $type
     */
    protected function api_write_log( $content, $type='request' )
    {
        $file= date('Y-m-d_H'). '.txt';
        $path= APPPATH. 'logs'. DS. 'admin'. DS. 'apimember'. DS;
        if( !file_exists($path) ) {
            @mkdir($path, 0777, TRUE);
        }
        $CI = & get_instance();
        $ip= $CI->input->ip_address();
        $fp = fopen( $path. $file, 'a');
        
        $content= str_repeat('-', 40). "\n[". $type. ' : '. date('Y-m-d H:i:s'). ' : '. $ip. ']'
            . "\n". $content. "\n";
            fwrite($fp, $content);
            fclose($fp);
    }
    public function request_send_template($inter_id = null, $json_data = array())
    {
        MYLOG::w(json_encode(array(
            'inter_id' => $inter_id,
            'data' => $json_data
        )), 'front/membervip/api/openapi', 'request_send_template');
        if (empty($inter_id) || empty($json_data))
            return $this->return_json('缺少必要参数!', - 1, true);
            
            $this->load->model('wx/access_token_model');
            $access_token = $this->access_token_model->get_access_token($inter_id);
            $url = self::SEND_URL . $access_token;
            $result = $this->doCurlPostRequest_wx($url, $json_data);
            // 保存日志
            MYLOG::w(json_encode(array(
                'res' => $result,
                'url' => $url,
                'data' => $json_data
            )), 'front/membervip/verify', 'request_send_template');
            
            $result_data = json_decode($result, true);
            if ($result_data['errcode'] == 0 && $result_data['errmsg'] == 'ok') {
                return $this->return_json('发送成功', $result_data['errcode'], true);
            } elseif ($result_data['errcode'] == '40001') {
                $access_token = $this->access_token_model->reflash_access_token($inter_id);
                $url = self::SEND_URL . $access_token;
                $result = $this->doCurlPostRequest_wx($url, $json_data);
                // 保存日志
                MYLOG::w(json_encode(array(
                    'res' => $result,
                    'url' => $url,
                    'data' => $json_data
                )), 'admin/membervip/verify', 'request_send_template');
                
                $result_data = json_decode($result, true);
                if ($result_data['errcode'] == 0 && $result_data['errmsg'] == 'ok') {
                    return $this->return_json('发送成功', $result_data['errcode'], true);
                }
            } elseif ($result_data['errcode'] == '42001') {
                $access_token = $this->access_token_model->reflash_access_token($inter_id);
                $url = self::SEND_URL . $access_token;
                $result = $this->doCurlPostRequest_wx($url, $json_data);
                // 保存日志
                MYLOG::w(json_encode(array(
                    'res' => $result,
                    'url' => $url,
                    'data' => $json_data
                )), 'admin/membervip/verify', 'request_send_template');
                
                $result_data = json_decode($result, true);
                if ($result_data['errcode'] == 0 && $result_data['errmsg'] == 'ok') {
                    return $this->return_json('发送成功', $result_data['errcode'], true);
                }
            }
            return $this->return_json('发送失败！', '40001', true);
    }
    function doCurlPostRequest_wx($url, $requestString, $extra = array(), $timeout = 20)
    {
        if ($url == "" || $requestString == "" || $timeout <= 0) {
            return false;
        }
        $con = curl_init((string) $url);
        curl_setopt($con, CURLOPT_HEADER, false);
        curl_setopt($con, CURLOPT_POSTFIELDS, $requestString);
        curl_setopt($con, CURLOPT_POST, true);
        curl_setopt($con, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($con, CURLOPT_TIMEOUT, (int) $timeout);
        curl_setopt($con, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($con, CURLOPT_SSL_VERIFYHOST, 0);
        
        if (! empty($extra) && is_array($extra)) {
            $headers = array();
            foreach ($extra as $opt => $value) {
                if (strexists($opt, 'CURLOPT_')) {
                    curl_setopt($con, constant($opt), $value);
                } elseif (is_numeric($opt)) {
                    curl_setopt($con, $opt, $value);
                } else {
                    $headers[] = "{$opt}: {$value}";
                }
            }
            if (! empty($headers)) {
                curl_setopt($con, CURLOPT_HTTPHEADER, $headers);
            }
        }
        $res = curl_exec($con);
        // var_dump(curl_error($con));
        return $res;
    }
    /**
     * 输出JSON提示
     *
     * @param string $errmsg
     *            提示信息
     * @param int $errcode
     *            状态码
     */
    protected function return_json($errmsg = '系统繁忙', $errcode = -1, $flag = false)
    {
        header('Content-Type:application/json; charset=utf-8');
        $result = new stdClass();
        $result->errcode = $errcode;
        $result->errmsg = $errmsg;
        if ($flag === true)
            return json_encode($result);
            exit(json_encode($result));
    }
    
}
?>

