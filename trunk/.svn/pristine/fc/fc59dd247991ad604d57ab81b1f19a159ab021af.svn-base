<?php
namespace App\services\soma;

use App\services\BaseService;

/**
 *
 * Class PaginateService
 * @package App\services\soma
 * @author liguanglong  <liguanglong@mofly.cn>
 *
 * @date 2017-07-04
 *
 */
class PaginateService extends BaseService
{


    /**
     * 获取服务实例方法
     * @return PaginateService
     */
    public static function getInstance()
    {
        return self::init(self::class);
    }


    /**
     * @desc 查询：分页
     * @param null $modelName
     * @param array $select
     * @param array $where
     * @param int $count
     * @return array
     * @author liguanglong  <liguanglong@mofly.cn>
     */
    public function paginate($modelName = null, $select = [], $where = [], $count = 20){

        return $this->query($modelName, $select, $where, $count);
    }


    /**
     * @desc 查询：所有
     * @param null $modelName
     * @param array $select
     * @param array $where
     * @return mixed
     * @author liguanglong  <liguanglong@mofly.cn>
     */
    public function all($modelName = null, $select = [], $where = []){

        return $this->query($modelName, $select, $where, 0)['data'];
    }


    /**
     * @desc 查询
     * @param null $modelName   'soma/product_package'
     * @param array $select   ['id', 'name']
     * @param array $where   [['and', 'id', '=', 2], ['or', 'name', 'like', '%xx%', 'both'], ['sort', 'id', 'asc']]
     * @param int $count    10
     * @return array
     * @author liguanglong  <liguanglong@mofly.cn>
     */
    private function query($modelName, $select, $where, $count){

        $result = [
            'total' => 0,
            'page_size' => $count,
            'page_num' => isset($_REQUEST['page']) ? ($_REQUEST['page'] <= 0 ? 1 : $_REQUEST['page']) : 1,
            'data' => []
        ];

        if($modelName){
            $this->getCI()->load->model($modelName, $modelName);
            $mainModel = $this->getCI()->$modelName;
            $tableName = $mainModel->table_name();
            $model = $mainModel->soma_db_conn->select(count($select) == 0 ? '*' : $select);
            if(count($where)){
                foreach($where as $key => $val){

                    $attache = 'where';

                    $whereList = [
                        'where' => [
                            ['and' => '='],
                            ['and' => 'is']
                        ],
                        'or_where' => [
                            ['or' => '='],
                            ['or' => 'is']
                        ],
                        'where_in' => [
                            ['and' => 'in'],
                        ],
                        'like' => [
                            ['and' => 'like']
                        ],
                        'or_like' => [
                            ['or' => 'like']
                        ],
                        'order_by' => [
                            ['sort' => 'asc'],
                            ['sort' => 'desc']
                        ]
                    ];

                    foreach($whereList as $item => $value){
                        foreach($value as $items => $values){
                            foreach($values as $k => $v){
                                if($k == $val[0] && $v == $val[2]){
                                    $attache = $item;
                                    break 3;
                                }
                            }
                        }
                    }

                    //条件查询
                    if(count($val) == 4 && $val[3]){
                        $model = $model->$attache($val[1], $val[3]);
                    }
                    //模糊查询
                    if(count($val) == 5 && $val[3]){
                        $model = $model->$attache($val[1], $val[3], $val[4]);
                    }
                    //排序
                    if(count($val) == 3 && $val[2]){
                        $model = $model->$attache($val[1], $val[2]);
                    }
                }
            }

            if(is_integer($count) && $count){
                $clone = clone $model;
                $result['data'] = $model->limit($count, ($result['page_num'] - 1) * $count)->get($tableName)->result_array();
                $result['total'] = $clone->count_all_results($tableName);

            }
            else{
                $result['data'] = $model->get($tableName)->result_array();
            }

        }

        return $result;
    }

}