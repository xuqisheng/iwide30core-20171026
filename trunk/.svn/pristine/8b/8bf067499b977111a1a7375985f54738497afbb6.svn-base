<?php

use App\facades\Input;
use App\services\Result;
use App\services\soma\KillsecService;
use App\services\soma\order\OrderProvider;
use App\services\soma\OrderService;
use Monolog\Handler\StreamHandler;
use App\services\soma\CronService;
use App\services\soma\ScopeDiscountService;

/**
 * Class Service
 * @author renshuai  <renshuai@mofly.cn>
 *
 *
 * for test
 */
class Service extends MY_Front_Soma
{

    /**
     *  ==========================
     *  ScopeDiscountService tests
     *  ==========================
     */


    public function check_stock()
    {
        $scope_product_link_id = 1;
        $num = 2;
        $result = ScopeDiscountService::getInstance()->checkStock($this->inter_id, $this->openid, $scope_product_link_id, $num);
        $this->json($result);
    }

    public function reduce_stock()
    {
        $scope_product_link_id = 1;
        $num = 2;
        $result = ScopeDiscountService::getInstance()->updateStock($this->inter_id, $this->openid, $scope_product_link_id, $num, '-');
        $this->json($result);
    }


    public function user_discount()
    {
        $result = ScopeDiscountService::getInstance()->getUserScopeDiscount($this->inter_id, $this->openid);
        $this->json($result);
    }

    public function appendScopeDiscount()
    {
        $this->load->model('soma/Product_package_model', 'productPackageModel');

        $productId = $this->input->get('pid');

        $productDetail = $this->productPackageModel->get_product_package_detail_by_product_id($productId, $this->inter_id);
        $products = array($productDetail);

        ScopeDiscountService::getInstance()->appendScopeDiscount($products, $this->current_inter_id, $this->openid, false);
        $productDetail = $products[0];
        $this->json($productDetail);
    }

    public function request()
    {
        $inter_id = 'a450089706';
        $openid = 'o9VbtwwUedrHzhXFSfegtSFMIKtU';
        $uri = $_SERVER['SERVER_NAME'] . "/api/ClubApi/getSomaClub?inter_id=$inter_id&openid=$openid";
        $result = ScopeDiscountService::getInstance()->request($uri);
        $this->json($result);

    }


    /**
     *  ==========================
     *  OrderService tests
     *  ==========================
     */
    public function order_create()
    {
        $posts = array(
            'business' => 'package',
            'settlement' => OrderProvider::NORMAL_SETTLEMENT,
            'hotel_id' => 180,
            'qty' => array(
                '12029' => 1
            ),
            'psp_setting' => [
                '12029' => -1
            ],
            'product_id' => 12029,
            'name' => '123',
            'phone' => 18620462480,
            'saler' => 0,
            'fans_saler' => 0,
            'inid' => 0,
            'mcid' => '',
            'u_type' => 1
        );

        $result = OrderService::getInstance()->create($posts);

        if ($result->getStatus() === Result::STATUS_FAIL) {
            echo 'fail';
        } else {
            $data = $result->getData();
            $salesOrderModel = $data['salesOrderModel'];
            $payChannel = $data['payChannel'];

            // 积分支付
            if($payChannel === 'point_pay') {
                echo $payChannel;
            } elseif ($payChannel === 'balance_pay') {
                echo $payChannel;
            }
        }

    }


    /**
     *  ==========================
     *  CronService tests
     *  ==========================
     */

    public function killsec_notice_sending()
    {
        $time = microtime(true);
        CronService::getInstance()->sendKillsecBeginNotice();
        $etime = microtime(true);

        echo $etime - $time;
        $this->output->enable_profiler(true);
    }

    public function send()
    {
        $result = CronService::getInstance()->send();

        echo $result;

    }

    /**
     *  ==========================
     *  KillsecService tests
     *  ==========================
     */

    public function oppo()
    {
        $result = KillsecService::getInstance()->test();

        $this->json($result->toArray());
    }


}