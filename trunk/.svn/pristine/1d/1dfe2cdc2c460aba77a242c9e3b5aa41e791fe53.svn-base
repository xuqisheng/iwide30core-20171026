<?php
class Iwidepay_model extends MY_Model{

	const TAB_IIP_O = 'iwidepay_order';
	const TAB_H = 'hotels';
	const TAB_IIP_S = 'iwidepay_split';
	const TAB_IIP_L = 'iwidepay_log';
	const TAB_HO = 'hotel_orders';
	function __construct() {
		parent::__construct ();
	}
    
	function save_iwidepay_order($order){
		$res = $this->db->where('order_no',$order['order_no'])->get(self::TAB_IIP_O)->row_array();
		if($res){
			return true;
		}
		return $this->db->insert(self::TAB_IIP_O,$order);
	}

	function get_iwidepay_order($order_no){
		return $this->db->where('order_no',$order_no)->get(self::TAB_IIP_O)->row_array();
	}

	function get_order_data($start_date='',$end_date=''){
        if(empty($start_date)){
            $start_date = date('Y-m-d',strtotime('-1 days'));
        }
        if(empty($end_date)){
            $end_date = date('Y-m-d');
        }
        $this->db->from(self::TAB_IIP_O.' a')->join(self::TAB_H.' b','a.inter_id=b.inter_id and a.hotel_id=b.hotel_id', 'left');
		$this->db->where(array(
			'add_time>' => $start_date,
			'add_time<=' => $end_date,
			));
		$res = $this->db->get()->result_array();
		$transfer_status = array(1=>'待定',2=>'待分',3=>'已分',4=>'异常');
		foreach ($res as $k => $v) {
			$res[$k]['transfer_status'] = $transfer_status[$v['transfer_status']];
		}
		return $res;
	}

	/**
	 * 供分销模块调用，修改订单分销金额和状态
	 */
	function edit_order_dist($inter_id,$order_no,$is_dist=1,$dist_amt=0){
		$this->load->helpers('common');
		MYLOG::w('分销调用数据：'.json_encode(func_get_args()),'iwidepay_model');
		$this->db->where(array(
			'inter_id' => $inter_id,
			'order_no' => $order_no,
			));
		$res = $this->db->get(self::TAB_IIP_O)->row_array();
		if(!$res){
			//不存在该订单
			return false;
		}
		if($res['is_dist']==3||$res['transfer_status']==3){
			//该订单已经处理
			return false;
		}
		if($dist_amt>0&&$is_dist!=2){
			//传分销金额状态，分销必须是2
			return false;
		}
		$this->db->where(array(
			'inter_id' => $inter_id,
			'order_no' => $order_no,
			));
		$data = array(
			'is_dist' => $is_dist,
			'dist_amt' => intval($dist_amt)+intval($res['dist_amt']),
			);
		return $this->db->update(self::TAB_IIP_O,$data);
	}

	function get_split_data($start_date,$end_date){
		if(empty($start_date)){
            $start_date = date('Y-m-d',strtotime('-1 days'));
        }
        if(empty($end_date)){
            $end_date = date('Y-m-d');
        }
        $this->db->from(self::TAB_IIP_S.' a')->join(self::TAB_H.' b','a.inter_id=b.inter_id and a.hotel_id=b.hotel_id', 'left');
		$this->db->where(array(
			'create_time>' => $start_date,
			'create_time<=' => $end_date,
			));
		$res = $this->db->get()->result_array();
		$type = array('group'=>'集团','hotel'=>'门店','jfk'=>'金房卡','dist'=>'分销','cost'=>'支付成本');
		foreach ($res as $k => $v) {
			$res[$k]['type'] = $type[$v['type']];
		}
		return $res;
	}

	//退款写在model里面
	public function refund($refund_data = array(),$order = array()){
		$this->load->library('IwidePay/IwidePayApi',null,'IwidePayApi');
		//退款先插一条退款记录
		$refund = array(
			'inter_id' =>$order['inter_id'],
			'hotel_id' => $order['hotel_id'],
			'openid' => $order['openid'],
			'transid' => '02',
			'merno' => IwidePayConfig::MERNO,
			'amount' => $order['trans_amt'],
			'refund_order_no' =>$refund_data['origOrderNo'],
			'refund_order_date'=>isset($refund_data['origOrderDate'])?$refund_data['origOrderDate']:date('Ymd'),
			'orig_order_no' =>$order['order_no'],
			'orig_order_date' => !empty($order['order_date'])?date('Ymd',strtotime($order['order_date'])):'',
			'pay_id' => $order['pay_id'],
			'refund_status'=>0,
			'refund_amt' => $refund_data['transAmt'],
			'module'=>$order['module'],
			'add_time' => date('Y-m-d H:i:s'),
		);
		$this->db->insert('iwidepay_refund',$refund);
		$refund_id = $this->db->insert_id();
		if(empty($refund_id)){
			echo '生成退款订单失败';
			MYLOG::w('生成退款订单失败', 'iwidepay/refund');
			die;
		}
		//装装数据
		$arr = array(
            'commodityName' => isset($refund_data['commodityName'])?$refund_data['commodityName']:'',
            'orderDate' => isset($refund_data['orderDate'])?$refund_data['orderDate']:date('Ymd'),
            'orderNo' => $refund_data['orderNo'],
            'requestNo' => $refund_data['requestNo'],
            'transAmt' => $refund_data['transAmt'],//单位：分
            'transId' => '02',
            'origOrderDate' => isset($refund_data['origOrderDate'])?$refund_data['origOrderDate']:date('Ymd'),
            'origOrderNo' =>$refund_data['origOrderNo'],
            'returnUrl' => $refund_data['returnUrl'],
           // 'notifyUrl' => 'http://www.baidu.com',
            'refundReson' => $refund_data['refundReson'],
        );
         //发起退款请求
         $data = $this->IwidePayApi->refundRequest($arr);
         MYLOG::w('退款数据返回:' . $data, 'iwidepay/refund');
         //解析返回
         $url = IwidePayConfig::REQUEST_URL;
         if(!empty($arr['requestUrl'])){
        	$url = $arr['requestUrl'];
         }
         $res = parse_url($url . "?" . $data);
         $arr_query = convertUrlQuery($res['query'],true);//var_dump($arr_query);die;
         if($arr_query['respCode'] === '0000'){
         	$this->db->where(array('id'=>$refund_id));
         	$this->db->update('iwidepay_refund',array('refund_status'=>1));
         }else{
         	$this->db->where(array('id'=>$refund_id));
         	$this->db->update('iwidepay_refund',array('refund_status'=>2));
         }
         return $arr_query;
	}

	/**
	 * 支付回调log
	 */
	function save_payreturn_log($in_arr){
		return $this->db->insert(self::TAB_IIP_L,$in_arr);
	}

	/**
	 * 根据orderid查出订单信息
	 */
	function get_hotel_order($orderid){
		$this->db->where(array(
			'orderid' => $orderid,
			));
		return $this->db->get(self::TAB_HO)->row_array();
	}

	/**
	 * 更新分账订单信息
	 */
	function update_iwidepay_order($inter_id,$hotel_id,$openid,$orderno,$order){
		$this->db->where(array(
			'inter_id' => $inter_id,
			'hotel_id' => $hotel_id,
			'openid' => $openid,
			'order_no' => $orderno,
		));
		return $this->db->update(self::TAB_IIP_O,$order);	
	}

	/**
	 * 关闭订单
	 */
	function close_order($order_no,$module=''){
		$order = $this->db->where(array(
			'order_no' => $order_no,
			))->get(self::TAB_IIP_O)->row_array();
		switch ($module) {
			case 'mall':
				//检查是否mall订单，订单号需转义
	            $this->load->somaDatabase($this->db_soma);
	            $this->load->somaDatabaseRead($this->db_soma_read);
	            $this->load->model('soma/Sales_order_model');
	        	$order_detail= $this->Sales_order_model->get_order_simple($order_no);
	            $order_no = $this->Sales_order_model->wx_out_trade_no_encode($order_no,$order_detail['settlement'],$order_detail['business']);
				break;
			
			default:
				break;
		}
		if(!empty($order)){
			$data = array(
				'requestNo' => time().rand(10000,99999),
				'transId' => '21',
				'orderDate' => date('Ymd'),
				'orderNo' => time().rand(1000,9999),
				'origOrderNo' => $order_no,//原订单号
				'origOrderDate' => $order['order_date'],//原订单日期
				);
			$this->load->helpers('common');
			MYLOG::w('关闭订单发送数据：'.json_encode($data),'iwidepay_model');
			$this->load->library('IwidePay/IwidePayApi',null,'IwidePayApi');
			$res = $this->IwidePayApi->closeOrderRequest($data);
			MYLOG::w('关闭订单响应数据：'.$res,'iwidepay_model');
			//转数组
        	$res = parseQString($res);
			if(!empty($res)&&$res['respCode']!=='0000'){
				return false;
			}
			return true;
		}
		return false;
	}

	/**
	 * 订单查询
	 */
	public function order_query($order_no){
		$order = $this->db->where(array(
			'order_no' => $order_no,
			))->get(self::TAB_IIP_O)->row_array();
		if(!empty($order)){
			$data = array(
				'requestNo' => time().rand(10000,99999),
				'transId' => '04',
				'orderDate' => date('Ymd'),
				'orderNo' => $order['order_no'],
				'orderDate' => $order['order_date'],//原订单日期
				);
			$this->load->helpers('common');
			MYLOG::w('查询订单发送数据：'.json_encode($data),'iwidepay_model');
			$this->load->library('IwidePay/IwidePayApi',null,'IwidePayApi');
			$res = $this->IwidePayApi->queryOrderRequest($data);
			MYLOG::w('查询订单响应数据：'.$res,'iwidepay_model');
			//转数组
        	$res = parseQString($res);
        	//return $res;
			if(!empty($res)&&$res['respCode']!=='0000'){
				return false;
			}
			return $res;
		}
		return false;
	}

	/**
	 * 供商城模块调用，修改通票核销hotel_id
	 */
	function edit_order_sell_hotel($inter_id,$order_no,$sell_hotel_id=0){
		$this->load->helpers('common');
		MYLOG::w('商城通票调用数据：'.json_encode(func_get_args()),'iwidepay_model');
		$this->db->where(array(
			'inter_id' => $inter_id,
			'order_no' => $order_no,
			));
		$res = $this->db->get(self::TAB_IIP_O)->row_array();
		if(!$res){
			//不存在该订单
			return false;
		}
		if($res['trans_status']==3){
			//该订单已经处理
			return false;
		}
		$this->db->where(array(
			'inter_id' => $inter_id,
			'order_no' => $order_no,
			));
		$data = array(
			'sell_hotel_id' => $sell_hotel_id,
			);
		return $this->db->update(self::TAB_IIP_O,$data);
	}
}
