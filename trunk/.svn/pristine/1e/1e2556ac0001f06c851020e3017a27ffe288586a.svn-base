<?php
if (! defined ( 'BASEPATH' ))
    exit ( 'No direct script access allowed' );

class Iwidepayreturn extends MY_Controller {
	function __construct(){
		parent::__construct();
		$this->load->library('IwidePay/IwidePayApi',null,'IwidePayApi');
	}

	//支付回调
	public function hotel_return(){
		$body = file_get_contents ( 'php://input' );

		$this->load->library('MYLOG');
        MYLOG::w('回调数据：'.$body,'iwidepayreturn');
        if(empty($body)){
        	exit('SUCCESS');
        }
        $this->load->model('iwidepay/Iwidepay_model');
        //转数组
        $parse_arr = parseQString($body,true);
        
        //根据orderid查出订单信息
        $idata = $this->Iwidepay_model->get_iwidepay_order($parse_arr['orderNo']);
        if(!$idata){
            //检查是否mall订单，订单号需转义
            $this->load->somaDatabase($this->db_soma);
            $this->load->somaDatabaseRead($this->db_soma_read);
            $this->load->model('soma/Sales_order_model');
            $parse_arr['orderNo'] = $this->Sales_order_model->wx_out_trade_no_decode($parse_arr['orderNo']);
            $idata = $this->Iwidepay_model->get_iwidepay_order($parse_arr['orderNo']);
        }
        if(!$idata){
            MYLOG::w('分账订单查询为空：'.json_encode($idata),'iwidepayreturn');
        	exit('SUCCESS');
        }
        //重复回调判断
        if($idata['transfer_status']>0){
            exit('SUCCESS');
        }

        // 验签，通过返回数组
        $result = $this->IwidePayApi->payCallBack($body);
        MYLOG::w('验签结果：'.json_encode($result),'iwidepayreturn');
        // 验签失败
        if(!$result){
            exit('SUCCESS');
        }

        //判断总金额是否相符
        if($idata['trans_amt']!=$parse_arr['transAmt']){
            MYLOG::w($parse_arr['orderNo'].'|回调金额'.$parse_arr['transAmt'].'与订单金额'.$idata['trans_amt'].'不一致'.'iwidepayreturn');
            exit('SUCCESS');
        }
        
        //各模块回调逻辑
        switch ($idata['module']) {
            case 'hotel':
                $this->hotel_handle($idata,$parse_arr,$body);
                break;
            case 'mall':
                $this->mall_handle($idata,$parse_arr);
                break;
            case 'ok':
                break;
            default:
                # code...
                break;
        }
		
		// 更新分账订单信息
		parse_str($body, $params);
		$split_order = array(
			'productid' => $params['productId'],
			'transid' => $params['transId'],
			'merno' => $params['merNo'],
			'order_status' => 1,
			'pay_time' => $params['payTime'],
			'pay_id' => $params['payId'],
			'transfer_status' => 2,
			'update_time' => date('Y-m-d H:i:s'),
			);
		MYLOG::w('分账订单更新数据：'.json_encode($split_order),'iwidepayreturn');
		$res = $this->Iwidepay_model->update_iwidepay_order($idata['inter_id'],$idata['hotel_id'],$idata['openid'],$parse_arr['orderNo'],$split_order);
		if(!$res){
			MYLOG::w('分账订单更新失败：'.json_encode($res),'iwidepayreturn');
			exit('SUCCESS');
		}
		// 成功响应
		exit('SUCCESS');
	}

    /**
     * [hotel_handle 订房模块回调逻辑]
     * @param  [array] $data      [分账订单信息]
     * @param  [array] $parse_arr [回调信息主体]
     * @param  [string] $body    [原始回调数据]
     * @return [type]            [description]
     */
    private function hotel_handle($data,$parse_arr,$body){
        //配置采用pms单号还是本地单号进行支付
        $this->load->model ( 'hotel/Hotel_config_model' );
        $config_data = $this->Hotel_config_model->get_hotel_config ( $data ['inter_id'], 'HOTEL', 0, array (
            'ORDER_PAY_ORDERID'
        ) );
        if(!empty($config_data['ORDER_PAY_ORDERID'])&&$config_data['ORDER_PAY_ORDERID']=='web'){
            $this->load->model ( 'hotel/Order_check_model' );
            $order = $this->Order_check_model->get_order_by_weborderid ( $data ['inter_id'], $data ['order_no'] );
            $parse_arr ['orderNo']=$order['orderid'];
        }
        $in_arr = array(
            'inter_id' => $data['inter_id'],
            'openid' => $data['openid'],
            'out_trade_no' => $parse_arr['orderNo'],
            'transaction_id' => $parse_arr['payId'],
            'pay_time' => time(),
            'rtn_content' => $body,
            'type' => 'iwidepay',
            );
        $this->db->insert ( 'pay_log', $in_arr );
        MYLOG::w('pay_return-pay_result_log:insert_time:'.microtime().',orderid:'.$parse_arr['orderNo'],'hotel_order'.DS.'pay_result','_read');
        // 修改模块订单状态
        if($parse_arr['respCode']==='0000'){
            $this->load->helper ( 'common_helper' );
            
            $this->db->where ( array (
                    'orderid' => $parse_arr['orderNo']
                    // 'openid' => $openid 
            ) );
            $order = $this->db->get ( 'hotel_orders' )->row_array ();
            if ($order && $order ['paid'] == 0) {
                $this->db->where ( array (
                        'orderid' => $parse_arr['orderNo']
                        // 'openid' => $openid 
                ) );
                $this->db->update ( 'hotel_orders', array (
                        'paid' => 1,
                        'isdel' => 0                        
                ) );
                $this->load->model ( 'hotel/Order_model' );
                $this->Order_model->pay_return ( $parse_arr['orderNo'] );
            }
        }else{
            $this->db->where ( array (
                    'orderid' => $parse_arr['orderNo'],
                    // 'openid' => $openid 
            ) );
            $this->db->update ( 'hotel_orders', array (
                    'operate_reason' => '支付失败订单' 
            ) );
            exit('SUCCESS');
        }
    }

    /**
     * [mall_handle 商城模块回调逻辑]
     * @param  [array] $data      [分账订单信息]
     * @param  [array] $parse_arr [回调信息主体]
     * @return [type]            [description]
     */
    private function mall_handle($data,$parse_arr){
        $this->load->model('soma/Sales_order_model');
        $order_id = $this->Sales_order_model->wx_out_trade_no_decode($parse_arr['orderNo']);

        $order_simple= $this->Sales_order_model->get_order_simple($order_id);

        //初始化数据库分片配置
        if( $order_simple['inter_id'] ){
            $this->load->model('soma/shard_config_model', 'model_shard_config');
            $this->current_inter_id= $order_simple['inter_id'];
            $this->db_shard_config= $this->model_shard_config->build_shard_config($order_simple['inter_id']);
            //print_r($this->db_shard_config);
        } else {
            Soma_base::inst()->show_exception($order_id. '微信支付回调数据分片配置失败！');
        }

        //处理结果成功与否
        $this->load->helper('soma/package');
        if ($parse_arr['respCode'] === '0000') {
            $debug = true;
            if ($debug) write_log('soma payment iwidepay_return invoked');

            //公共保存部分
            $this->load->model('soma/sales_payment_model');
            $payment_model= $this->sales_payment_model;
            //取得商户/子商户的openid,
            //$openid = empty ( $result['sub_openid'] ) ? $result['openid'] : $result['sub_openid'];
            
            $log_data= array();
            $log_data['paid_ip']= $this->input->ip_address();
            $log_data['paid_type']= $payment_model::PAY_TYPE_WX;
            $log_data['order_id']= $order_id;
            $log_data['openid']= $order_simple['openid'];
            $log_data['business']= $order_simple['business'];
            $log_data['settlement']= $order_simple['settlement'];
            $log_data['inter_id']= $order_simple['inter_id'];
            $log_data['hotel_id']= $order_simple['hotel_id'];
            $log_data['grand_total']= $order_simple['grand_total'];
            $log_data['transaction_id']= $parse_arr['payId'];
            /**
             * @var Sales_order_model $order
             */
            $order = $this->Sales_order_model->load($order_id);
            if( empty($order) ){
                Soma_base::inst()->show_exception($order_id. '微信支付回调 Sales Model初始化失败！');
            }

            if( !in_array( $order->m_get('status'), $order->can_payment_status()) ) {
                Soma_base::inst()->show_exception('订单号[' .$log_data['order_id'] .']不能重复支付，或目前处于不能支付的状态。');
            }

            $order->order_payment( $log_data );
            $order->order_payment_post();
            
            $this->sales_payment_model->save_payment($log_data, NULL);  //校验签名时已经记录
            //$this->sales_payment_model->save_payment($log_data, $xml);  //插入支付记录，并文件记录xml内容

            if ($debug) write_log('soma payment wxpay_return invoked end');
            
        } else {
            write_log($xml, 'iwidepay_return_code_fail.txt' );
            exit('SUCCESS');
        }
    }
}