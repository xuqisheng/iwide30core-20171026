<?php
// +------------------------------------------------------------------
// | 优惠任务发送处理器
// +------------------------------------------------------------------
// | Author：liwensong
// +------------------------------------------------------------------
// | Email: septet-l@outlook.com
// +------------------------------------------------------------------
defined('BASEPATH') or exit('No direct script access allowed');
/**
 * Class Membertask_logic
 * @property Public_model $common_model
 * @property Card_model $card_model
 * @property Package_model $package_model
 * @property Member_model $member_model
 * @property CI_Loader $load
 */
class Membertask_logic extends MY_Model_Member {

    const SEND_URL = 'https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=';
    private $err = '';
    private $err_msg = '';
    private $data = array();
    private $redis = null;
    private $send_success_num = 0;
    private $send_fail_num = 0;
    private $inter_id = '';

    public function __construct(){
        parent::__construct();
        $this->redis = $this->get_vip_redis();
        $this->load->model('membervip/common/Public_model','common_model');
        $this->load->library("MYLOG");
    }

    /**
     * 处理待发任务
     * @param int $limit
     * @return array
     */
    public function comply_task_event($limit = 100){
        //查询未发送的任务
        $task_execute = $this->_shard_db()->where('task_status',1)
                             ->limit($limit)->order_by('createtime asc')->get('send_task_execute')->result_array();

        if(empty($task_execute)){
            $this->__set_err('401');
            $this->__set_msg('不存在待发送任务');
        }else{
            foreach ($task_execute as $item){
                $this->execute_task_event($item);
            }
        }
        return $this->err_msg();
    }

    /**
     * 开始任务
     * @param string $inter_id 酒店集团ID
     * @param string $task_id 任务ID
     * @param string $task_execute_id 任务执行ID
     * @return object|int|boolean
     */
    protected function start_task_event($inter_id = '',$task_id = '',$task_execute_id = ''){
        $where = array(
            'inter_id'=>$inter_id,
            'task_id'=>$task_id,
            'task_status'=>1
        );
        if(!empty($task_execute_id)){
            $where['task_execute_id'] = $task_execute_id;
        }
        $data = array(
            'task_status'=>2,
        );
        $return = $this->_shard_db(true)->where($where)->set($data)->update('send_task_execute');
        return $return;
    }

    /**
     * 结束任务
     * @param string $inter_id 酒店集团ID
     * @param string $task_id 任务ID
     * @param string $task_execute_id 任务执行ID
     * @return object|int|boolean
     */
    protected function end_task_event($inter_id = '',$task_id = '',$task_execute_id = ''){
        $where = array(
            'inter_id'=>$inter_id,
            'task_id'=>$task_id,
        );
        if(!empty($task_execute_id)){
            $where['task_execute_id'] = $task_execute_id;
        }
        $data = array(
            'task_status'=>3,
            'send_success_num'=>$this->send_success_num,
            'send_fail_num'=>$this->send_fail_num
        );
        $update = $this->_shard_db(true)->where($where)->set($data)->update('send_task_execute');
        return $update;
    }

    /**
     * 执行待发任务
     * @param array $param
     * @return bool
     */
    protected function execute_task_event($param = array()){
        $this->inter_id = $param['task_id'];
        $where = array(
            'task_id'=>$param['task_id'],
            'inter_id'=>$param['inter_id'],
            'is_active'=>'t'
        );
        $task_info = $this->_shard_db()->where($where)->get('send_task')->row_array();
        if(empty($task_info)){
            $this->__set_err('406');
            $this->__set_msg('发送任务配置信息不存在');
            MYLOG::w(@json_encode(array('where'=>$where,'res'=>$task_info,'err_msg'=>$this->err_msg())),'membervip/debug-log/membertask','err_msg');
            return false;
        }

        $send_time_str = strtotime(date('Y-m-d H:i:00',strtotime($task_info['send_time'])));
        if($send_time_str > time()){
            $this->__set_err('410');
            $this->__set_msg('发送任务没到指定发送时间');
            MYLOG::w(@json_encode(array('res'=>$task_info,'err_msg'=>$this->err_msg())),'membervip/debug-log/membertask','err_msg');
            return false;
        }

        $start_task = $this->start_task_event($param['inter_id'],$param['task_id'],$param['task_execute_id']); //开始发送
        if(!$start_task){
            $this->__set_err('412');
            $this->__set_msg('任务正在发送中...');
            return $start_task;
        }

        $send_data = $this->get_send_content($task_info);
        MYLOG::w(@json_encode(array('where'=>$task_info,'res'=>$send_data,'err_msg'=>$this->err_msg())),'membervip/debug-log/membertask','send_data');
        if(!empty($send_data)){
            $this->load->helper('common');
            $user_info = $this->get_send_user($task_info);
            if(empty($user_info)){
                $this->__set_err('411');
                $this->__set_msg('找不到发送用户');
                MYLOG::w(@json_encode(array('res'=>$task_info,'err_msg'=>$this->err_msg())),'membervip/debug-log/membertask','err_msg');
                $this->end_task_event($param['inter_id'],$param['task_id'],$param['task_execute_id']); //结束发送
                return false;
            }

            $send_user_count = count($user_info);
            $this->update_task_send_user_count($param['inter_id'],$param['task_id'],$param['task_execute_id'],$send_user_count); //更新发送人数

            $card_url = INTER_PATH_URL.'intercard/sp_receive'; //领取卡劵
            $temp_data = array();
            foreach ($user_info as $item){
                $send_status = 0;
                $send_count = $task_info['send_count'];
                if($task_info['send_type']==1){
                    $card_data = array(
                        'token'=>'',
                        'inter_id'=>$task_info['inter_id'],
                        'openid'=>$item['open_id'],
                        'card_id'=>$send_data['card_id'],
                        'uu_code'=>md5(uniqid($send_data['card_id'].$item['open_id'].$send_data['member_info_id'])).microtime(true),
                        'module'=>'vip',
                        'scene'=>'优惠券批量发放',
                        'give_count'=>$send_count
                    );

                    if($task_info['receive_repeat']==1){
                        unset($card_data['give_count']);
                    }

                    $result = array();
                    $requestString = http_build_query($card_data);
                    for ($i = 0; $i < $send_count; $i++){
                        $result = doCurlPostRequest($card_url,$requestString);
                    }
                    $receive_res = @json_decode($result,true);
                    if((!isset($receive_res['err']) OR $receive_res['err'] == '0') && !empty($receive_res['data'])){
                        $send_status = 1;
                        $this->send_success_num = $this->send_success_num + 1;
                    }else{
                        $this->send_fail_num = $this->send_fail_num + 1;
                    }
                    $_param = array(
                        'send_status'=>$send_status,
                        'receive_res'=>$receive_res,
                        'task_info'=>$task_info,
                        'userinfo'=>$item
                    );
                    MYLOG::w(@json_encode(array('res'=>$_param,'err_msg'=>$this->err_msg())),'membervip/debug-log/membertask','err_msg');
                    $this->add_send_task_event($_param);
                }elseif($task_info['send_type']==2){
                    $packge_url = INTER_PATH_URL.'package/receive';
                    $package_data = array(
                        'token'=>'',
                        'inter_id'=>$task_info['inter_id'],
                        'openid'=>$item['open_id'],
                        'uu_code'=>uniqid(),
                        'package_id'=>$send_data['package_id'],
                        'number'=>$send_count,
                        'count'=>$send_count,
                        'extra'=>1,
                        'add'=>1
                    );

                    if($task_info['receive_repeat']==1){
                        unset($package_data['number']);
                        unset($package_data['extra']);
                        unset($package_data['add']);
                    }

                    $result = array();
                    $requestString = http_build_query($package_data);
                    for ($i = 0; $i < $send_count; $i++){
                        $result = doCurlPostRequest( $packge_url , $requestString );
                    }
                    $receive_res = @json_decode($result,true);
                    if($receive_res['err'] == '0'){
                        $send_status = 1;
                        $this->send_success_num = $this->send_success_num + 1;
                    }else{
                        $this->send_fail_num = $this->send_fail_num + 1;
                    }
                    $_param = array(
                        'send_status'=>$send_status,
                        'receive_res'=>$receive_res,
                        'task_info'=>$task_info,
                        'userinfo'=>$item
                    );
                    MYLOG::w(@json_encode(array('res'=>$_param,'err_msg'=>$this->err_msg())),'membervip/debug-log/membertask','err_msg');
                    $this->add_send_task_event($_param);
                }
                $temp_data[] = array(
                    'send_status'=>$send_status,
                    'userinfo'=>$item,
                );
            }

            $end_task = $this->end_task_event($param['inter_id'],$param['task_id'],$param['task_execute_id']); //结束发送
            if(!$end_task){
                $this->__set_err('413');
                $this->__set_msg('该任务已完成');
                return $end_task;
            }

            if($task_info['is_send_temp'] == 1){
                if(empty($task_info['temp_id'])){
                    $this->__set_err('801');
                    $this->__set_msg('请先配置模版ID');
                    return false;
                }

                if(empty($task_info['temp_conf'])){
                    $this->__set_err('802');
                    $this->__set_msg('请先配置模版消息内容');
                    return false;
                }

                foreach ($temp_data as $vo){
                    if($vo['send_status'] == '1'){
                        if(!empty($send_data['name'])) $send_data['package_name'] = $send_data['name'];
                        $temp_param = array_merge($send_data,$vo['userinfo'],$task_info);
                        $this->send_template($temp_param);
                    }
                }
            }
            return true;
        }
        return false;
    }

    public function update_task_send_user_count($inter_id = '', $task_id = '', $task_execute_id = '', $count = 0){
        $where = array(
            'inter_id'=>$inter_id,
            'task_id'=>$task_id,
        );

        if(!empty($task_execute_id)){
            $where['task_execute_id'] = $task_execute_id;
        }

        $data = array(
            'send_num'=>$count,
        );

        $this->_shard_db(true)->where($where)->set($data)->update('send_task_execute');
    }

    //添加发送任务结果记录
    protected function add_send_task_event($param = array()){
        if(empty($param)) return false;
        $send_status = $param['send_status'];
        $receive_res = $param['receive_res'];
        $task_info = $param['task_info'];
        $userinfo = $param['userinfo'];
        $telephone = !empty($userinfo['telephone'])?$userinfo['telephone']:$userinfo['cellphone'];
        $state = $send_status == 1 ? 1 : 2;
        $msg = '';
        if(!empty($receive_res['msg']) && $receive_res['msg'] != 'ok'){
            $msg = $receive_res['msg'];
        }elseif ($state == 2){
            $msg = '未知错误';
        }

        $send_target = $task_info['send_target'];
        $send_target_field = 0;
        if(!empty($send_target) && $send_target == 3){
            json_decode($task_info['target_value']);
            if((json_last_error() == JSON_ERROR_NONE)){
                $target_value = @json_decode($task_info['target_value'],true);
                $send_target_field = !empty($target_value['field'])?$target_value['field']:0;
            }
        }

        $add_data = array(
            'inter_id'=>$task_info['inter_id'],
            'task_id'=>$task_info['task_id'],
            'member_info_id'=>$userinfo['member_info_id'],
            'membership_number'=>$userinfo['membership_number'],
            'telephone'=>$telephone,
            'openid'=>$userinfo['open_id'],
            'entry_method'=>$send_target_field,
            'state'=>$state,
            'msg'=>$msg,
            'send_time'=>date('Y-m-d H:i:s')
        );
        $this->_shard_db(true)->set($add_data)->insert('send_task_event');
    }

    /**
     * 发送模版消息
     * @param array $temp_param
     * @return bool
     */
    public function send_template($temp_param = array()){
        $temp_conf = @json_decode($temp_param['temp_conf'],true);
        try{
            $temp_content = '';
            if($temp_param['send_type'] == 1){
                $temp_content = "{$temp_param['title']}*{$temp_param['send_count']}张";
            }elseif ($temp_param['send_type'] == 2){
                $package_content = array();
                if(!empty($temp_param['card'])){
                    foreach ($temp_param['card'] as $kvo){
                        $title = !empty($kvo['title'])?$kvo['title']:'';
                        $package_content[] = "{$title}*{$kvo['count']}张";
                    }
                }

                if(!empty($temp_param['credit']) && intval($temp_param['credit']) > 0){
                    $credit = intval($temp_param['credit']);
                    $package_content[] = "{$credit}积分";
                }

                if(!empty($temp_param['balance']) && floatval($temp_param['balance']) > 0){
                    $balance = intval($temp_param['balance']);
                    $package_content[] = "{$balance}储值";
                }

                if(!empty($temp_param['lvl_name'])){
                    $member_lvl = $this->common_model->get_field_by_level_config($temp_param['inter_id']);
                    $lvl_name = !empty($member_lvl[$temp_param['lvl_name']])?$member_lvl[$temp_param['lvl_name']]:'';
                    $package_content[] = "{$lvl_name} (会员等级)";
                }
                $temp_content = implode(', ',$package_content);
            }

            $openid = $temp_param['open_id'];

            $type = 15;
            $inter_id = $temp_param['inter_id'];
            $task_id = !empty($temp_param['task_id'])?$temp_param['task_id']:0;

            $content['first']['value'] = $temp_conf['first'];
            $content['remark']['value'] = $temp_conf['remark'];


            $message['touser'] = $openid;//发送给哪个用户
            $message['template_id'] = $temp_param['temp_id'];//微信模版ID

            //链接处理
            $url = '';
            $param = array('id'=>$inter_id,'membertaskid'=>$task_id);
            $templateUrl = $temp_conf['url'];//需要处理链接
            if( $templateUrl ){
                switch ($templateUrl) {
                    case 1:
                        $url = EA_const_url::inst()->get_front_url( $inter_id,'membervip/center',$param);
                        break;
                    case 2:
                        $url = EA_const_url::inst()->get_front_url( $inter_id, 'membervip/card',$param);
                        break;
                    default:
                        if(strpos($templateUrl,'?')===false){
                            $templateUrl = $templateUrl . '?membertaskid='.$task_id;
                        }else{
                            $templateUrl = $templateUrl . '&membertaskid='.$task_id;
                        }
                        $url = $templateUrl;
                        break;
                }
            }
            $message['url'] = $url;
            $message['data']['first'] = array(
                'value'=>$temp_conf['first'],
                'color'=>'#000000',
            );
            $message['data']['remark'] = array(
                'value'=>$temp_conf['remark'],
                'color'=>'#000000',
            );


            $message['data']['keyword1'] = array(
                'value'=>$temp_conf['keyword1'],
                'color'=>'#000000',
            );

            $message['data']['keyword2'] = array(
                'value'=>$temp_conf['keyword2'],
                'color'=>'#000000',
            );

            $message['data']['keyword3'] = array(
                'value'=>$temp_conf['keyword3'],
                'color'=>'#000000',
            );

            $message['data']['keyword4'] = array(
                'value'=>$temp_conf['keyword4'],
                'color'=>'#000000',
            );

            $json_data = @json_encode($message);
            $json_data = str_replace(array('{membernum}','{temp_content}','{send_time}','{username}'), array($temp_param['membership_number'],$temp_content,$temp_param['send_time'],$temp_param['name']),$json_data);
            if(empty($json_data)){
                $this->__set_err('803');
                $this->__set_msg('模版消息发送内容为空');
                return false;
            }

            $sendResult = $this->request_send_template($inter_id,$json_data);
            MYLOG::w(json_encode(array('res'=>$sendResult,'param'=>array('inter_id'=>$inter_id,'json_data'=>$json_data))),'membervip/debug/membertask','request_send_template');

            $data = array(
                'inter_id'=>$inter_id,
                'hotel_id'=>0,
                'temp_id'=>0,
                'template_id'=>$temp_param['temp_id'],
                'openid'=>$openid,
                'type'=>$type,
                'msg'=>$json_data,
                'result'=>$sendResult,
                'create_time'=>date( "Y-m-d H:i:s"),
                'status'=>$sendResult===true?1:2
            );
            $data['result'] = $sendResult;
            $data['create_time'] = date( "Y-m-d H:i:s");
            $data['status'] = $sendResult===true?1:2;//STATUS_FAIL

            //保存到record
            $res = $this->common_model->add_data($data,'message_wxtemp_record');
            MYLOG::w(json_encode(array('res'=>$res,'param'=>$data)),'membervip/debug/membertask','message_wxtemp_record');
            $this->__set_err('1000');
            $this->__set_msg('发送模版消息成功');
            return true;
        }catch (Exception $e){
            MYLOG::w(array('FILE'=>$e->getFile(),'LINE'=>$e->getLine(),'code'=>$e->getCode(),'message'=>$e->getMessage()),'membervip/debug/membertask', 'Exception');
            $this->__set_err('10001');
            $this->__set_msg('发送模版消息失败');
            return false;
        }
    }

    /**
     * 发送模版消息
     * @param $json_data
     * @return string
     */
    public function request_send_template($inter_id = null,$json_data = array()){
        if(empty($inter_id || empty($json_data))) {
            $this->__set_err('804');
            $this->__set_msg('缺少必要参数');
            return false;
        }

        $this->load->model('wx/access_token_model');
        $access_token= $this->access_token_model->get_access_token($inter_id);
        $url = self::SEND_URL.$access_token;
        $result = doCurlPostRequest($url,$json_data);
        //保存日志
        MYLOG::w(json_encode(array('res'=>$result,'url'=>$url,'data'=>$json_data)),'membervip/debug/membertask','request_send_template');

        $result_data = json_decode($result,true);
        if($result_data['errcode'] == 0 && $result_data['errmsg'] == 'ok'){
            $this->__set_err('0');
            $this->__set_msg('发送成功');
            return true;
        }elseif ($result_data['errcode'] == '40001'){
            $access_token = $this->access_token_model->reflash_access_token ( $inter_id );
            $url = self::SEND_URL.$access_token;
            $result = doCurlPostRequest($url,$json_data);
            //保存日志
            MYLOG::w(json_encode(array('res'=>$result,'url'=>$url,'data'=>$json_data)),'membervip/debug/membertask','request_send_template');

            $result_data = json_decode($result,true);
            if($result_data['errcode'] == 0 && $result_data['errmsg'] == 'ok'){
                $this->__set_err('0');
                $this->__set_msg('发送成功');
                return true;
            }
        }elseif ($result_data['errcode'] == '42001'){
            $access_token = $this->access_token_model->reflash_access_token ( $inter_id );
            $url = self::SEND_URL.$access_token;
            $result = doCurlPostRequest($url,$json_data);
            //保存日志
            MYLOG::w(json_encode(array('res'=>$result,'url'=>$url,'data'=>$json_data)),'membervip/debug/membertask','request_send_template');

            $result_data = json_decode($result,true);
            if($result_data['errcode'] == 0 && $result_data['errmsg'] == 'ok'){
                $this->__set_err('0');
                $this->__set_msg('发送成功');
                return true;
            }
        }
        $this->__set_err('10001');
        $this->__set_msg('发送失败');
        return false;
    }

    protected function get_send_user($param = array()){
        if(empty($param)){
            $this->__set_err('999');
            $this->__set_msg('参数错误');
            return false;
        }
        $__key = $param['inter_id']."_MemBerTaskSendUser_".$param['task_id'].$param['send_target'];
        $user = $this->redis->get($__key);
        if(!empty($user)){
            return @json_decode($user,true);
        }
        $send_target = $param['send_target'];
        $this->load->model('membervip/admin/Member_model','member_model');
        $user_info = array();
        switch ($send_target){
            case 1:
                $target_value = $param['target_value'];
                if($target_value == 'all_member_lvl'){
                    $member_lvl = $this->common_model->get_field_by_level_config($param['inter_id']);
                    if(empty($member_lvl)){
                        $this->__set_err('407');
                        $this->__set_msg('等级未配置');
                        return false;
                    }
                    $member_ids = array_keys($member_lvl);
                    $user_info = $this->member_model->get_user_by_lvl($param['inter_id'],$member_ids);
                    if(empty($user_info)){
                        $this->__set_err('408');
                        $this->__set_msg("该公众号{$param['inter_id']}通过等级无法找到会员信息");
                        return false;
                    }
                    $json_data = @json_encode($user_info);
                    $this->redis->setex($__key,1800,$json_data);
                }else{
                    json_decode($param['target_value']);
                    if((json_last_error() == JSON_ERROR_NONE)){
                        $member_ids = json_decode($param['target_value'],true);
                        $user_info = $this->member_model->get_user_by_lvl($param['inter_id'],$member_ids);
                        if(empty($user_info)){
                            $this->__set_err('408');
                            $this->__set_msg("该公众号{$param['inter_id']}通过等级无法找到会员信息");
                            return false;
                        }
                        $json_data = @json_encode($user_info);
                        $this->redis->setex($__key,1800,$json_data);
                    }
                }
                break;
            case 2:
                $target_value = json_decode($param['target_value'],true);
                $source = !empty($target_value[0])?$target_value[0]:'';
                $rfm = !empty($target_value[1])?$target_value[1]:'';
                $rfm_level = !empty($target_value[2])?$target_value[2]:'';
                $request_data = array(
                    't'=>time(),
                    'inter_id'=>$param['inter_id'],
                    'source'=>$source,
                    $rfm=>$rfm_level
                );
                $secretKey = '6lPgIYNsmJhVdyqhtX';
                $signature = $this->common_model->signature($request_data,$secretKey);
                $openids = $this->common_model->get_rfm_data($signature,$request_data);
                if(empty($openids)){
                    $this->__set_err('408');
                    $this->__set_msg("该公众号{$param['inter_id']}通过RMF模型无法找到会员信息");
                    return false;
                }
                $user_info = $this->member_model->get_user_by_openids($param['inter_id'],$openids);
                $this->check_task_event($param,$openids,$user_info,'open_id',4);
                if(empty($user_info)){
                    $this->__set_err('408');
                    $this->__set_msg("该公众号{$param['inter_id']}通过openid无法找到会员信息");
                    return false;
                }
                $json_data = @json_encode($user_info);
                $this->redis->setex($__key,1800,$json_data);
                break;
            case 3:
                $target_value = json_decode($param['target_value'],true);
                $send_target_field = !empty($target_value['field'])?$target_value['field']:'';
                $send_target_type = !empty($target_value['type'])?$target_value['type']:'';
                $send_target_value = !empty($target_value['value'])?$target_value['value']:'';
                $send_target_value_arr = array();
                if($send_target_type == 1){
                    $send_target_value_arr = explode(',',$send_target_value);
                }elseif($send_target_type == 2){
                    $send_target_value_arr = $this->common_model->get_file_content($send_target_value);
                }

                if(empty($send_target_value_arr)){
                    $this->__set_err('997');
                    $this->__set_msg('查询参数错误');
                    return false;
                }

                $vfield = '';
                switch ($send_target_field){
                    case 1:
                        $member_mode = $this->member_model->get_member_mode($param['inter_id']);
                        if($member_mode == 'login'){
                            $vfield = 'telephone';
                            $where = array(
                                'inter_id'=>$param['inter_id'],
                                'telephone'=>$send_target_value_arr
                            );
                        }else{
                            $vfield = 'cellphone';
                            $where = array(
                                'inter_id'=>$param['inter_id'],
                                'cellphone'=>$send_target_value_arr,
                                'member_mode'=>1
                            );
                        }
                        break;
                    case 2:
                        $vfield = 'member_info_id';
                        $where = array(
                            'inter_id'=>$param['inter_id'],
                            'member_info_id'=>$send_target_value_arr
                        );
                        break;
                    case 3:
                        $vfield = 'membership_number';
                        $where = array(
                            'inter_id'=>$param['inter_id'],
                            'membership_number'=>$send_target_value_arr
                        );
                        break;
                    case 4:
                        $vfield = 'open_id';
                        $where = array(
                            'inter_id'=>$param['inter_id'],
                            'open_id'=>$send_target_value_arr,
                            'member_mode'=>1
                        );
                        break;
                }
                if(!empty($where)){
                    $field = 'inter_id,open_id,member_info_id,name,membership_number,telephone,cellphone';
                    $user_info = $this->member_model->get_member_info_list($where,$field);
                    $this->check_task_event($param,$send_target_value_arr,$user_info,$vfield,$send_target_field);
                    if(empty($user_info)){
                        $this->__set_err('408');
                        $this->__set_msg("该公众号{$param['inter_id']}通过{$vfield}无法找到会员信息");
                        return false;
                    }
                    $json_data = @json_encode($user_info);
                    $this->redis->setex($__key,1800,$json_data);
                }else{
                    $this->__set_err('998');
                    $this->__set_msg('查询参数错误');
                    return false;
                }
                break;
        }
        return $user_info;
    }

    /**
     * 验证发送用户
     * @param array $param
     * @param array $send_arr
     * @param array $user_info
     * @param string $key
     * @param int $entry_method
     * @return bool
     */
    protected function check_task_event($param = array(),$send_arr = array(),$user_info = array(), $key = '',$entry_method = 0){
        if(!empty($param) && !empty($send_arr)){
            $_user_info = array();
            foreach ($user_info as $item){
                if(!empty($item[$key])) $_user_info[$item[$key]] = $item;
            }

            $field = $key;
            if($key == 'open_id') $field = 'openid';
            if($key == 'cellphone') $field = 'telephone';

            $key_name = '';
            switch ($key){
                case 'telephone':
                case 'cellphone':
                    $key_name = '手机号码';
                    break;
                case 'member_info_id':
                    $key_name = '会员ID';
                    break;
                case 'membership_number':
                    $key_name = '会员卡号';
                    break;
                case 'open_id':
                    $key_name = 'OPEN ID';
                    break;
            }

            foreach ($send_arr as $v){
                if(empty($_user_info[$v])){
                    $this->send_fail_num = $this->send_fail_num + 1;
                    $add_data = array(
                        'inter_id'=>$param['inter_id'],
                        'task_id'=>$param['task_id'],
                        'state'=>2,
                        'msg'=>$key_name.'错误无法找到该会员',
                        'send_time'=>date('Y-m-d H:i:s'),
                        'entry_method'=>$entry_method
                    );
                    $add_data[$field] = $v;
                    $this->_shard_db(true)->set($add_data)->insert('send_task_event');
                }
            }
        }
        return true;
    }


    /**
     * 获取发送内容
     * @param array $param
     * @return bool|mixed|string|array
     */
    protected function get_send_content($param = array()){
        if(empty($param)){
            $this->__set_err('999');
            $this->__set_msg('参数错误');
            return false;
        }
        $__key = $param['inter_id']."_MemBerTaskSendContent_".$param['task_id'].$param['send_type'].$param['send_value'];
        $data = $this->redis->get($__key);
        if(!empty($data)){
            return @json_decode($data,true);
        }
        if($param['send_type'] == 1){
            $this->load->model('membervip/admin/Card_model','card_model');
            $data = $this->card_model->get_can_received($param['inter_id'],$param['send_value']);
            if(empty($data)){
                $this->__set_err('402');
                $this->__set_msg('优惠券不存在或未激活');
                return false;
            }
            $json_data = @json_encode($data);
            $this->redis->setex($__key,600,$json_data);
        }else{
            $this->load->model('membervip/admin/Package_model','package_model');
            $data = $this->package_model->get_packages_elements_list($param['inter_id'],$param['send_value']);
            if(empty($data)){
                $this->__set_err('403');
                $this->__set_msg('礼包不存在或未激活');
                return false;
            }
            $json_data = @json_encode($data);
            $this->redis->setex($__key,600,$json_data);
        }
        return $data;
    }

    private function __set_err($code = 0){
        $this->err = $code;
    }

    private function __set_msg($msg = ''){
        $this->err_msg = $msg;
    }

    private function err_msg(){
        $return = array(
            'err'=>$this->err,
            'msg'=>$this->err_msg,
            'data'=>$this->data
        );
        MYLOG::w(@json_encode(array('inter_id'=>$this->inter_id,'res'=>$return)),'membervip/debug-log/membertask','err_msg');
        return $return;
    }

    protected function redis_setting(){
        if( isset($_SERVER['CI_ENV']) && $_SERVER['CI_ENV']=='production' ){
            $config = array(
                'task'=> array(
                    'socket_type'   => 'tcp',
                    'password'      => NULL,
                    'timeout'       => 5,
                    'cachedb'       => 14,
                    'host'          => 'redis02',
                    'port'          => 6381
                ),
            );
        } else {
            $config = array(
                'task'=> array(
                    'socket_type'   => 'tcp',
                    'password'      => NULL,
                    'timeout'       => 5,
                    'cachedb'       => 2,
                    'host'          => '120.27.132.97',
                    'port'          => 16379
                ),
            );
        }
        return $config;
    }

    protected function get_vip_redis($select = 'task') {
        $redis_config = $this->redis_setting();
        $config = $redis_config[$select];
        if(!is_array($config)) {
            return false;
        }
        $redis = new Redis();
        $success = $redis->connect($config['host'], $config['port'], $config['timeout']);
        MYLOG::w(@json_encode(array('data'=>$redis_config,'success'=>$success)),'membervip/debug-log','membertask_logic_redis');
        if(!$success) {
            return false;
        }
        return $redis;
    }
}