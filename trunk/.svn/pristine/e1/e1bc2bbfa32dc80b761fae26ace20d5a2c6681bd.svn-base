<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class EA_behavior_log extends EA_base
{
	protected $_controller= NULL;
	protected $_model= NULL;
	protected $_admin= NULL;
	
	
	public function __construct()
	{
	     return parent::__construct();
	}

	public static function inst($className=__CLASS__)
	{
		return parent::inst($className);
	}
	
	public function get_log_model()
	{
		$this->_controller->load->model('core/priv_admin_log', 'm');
		return $this->_controller->m;
	}
	
	public function get_action_type()
	{
		$model= $this->get_log_model();	
		//内置事件一共有4大类，具体方法归类到相应的分类中，或者增加新的大类。
		return array(
			'login'=> $model::ACTION_TYPE_LOGIN,
			'logout'=> $model::ACTION_TYPE_LOGIN,
			'add'=> $model::ACTION_TYPE_CREATE,
			'edit'=> $model::ACTION_TYPE_EDIT,
			'edit_post'=> $model::ACTION_TYPE_UPDATE,
            'edit_post2'=> $model::ACTION_TYPE_UPDATE,
			'plus_post'=> $model::ACTION_TYPE_UPDATE,
			'profile_post'=> $model::ACTION_TYPE_UPDATE,
			'delete'=> $model::ACTION_TYPE_DELETE,
			'sync'=> $model::ACTION_TYPE_SYNC,
            'create_group' => $model::ACTION_TYPE_CREATE,
            'update_group' => $model::ACTION_TYPE_UPDATE
		);
	}
	
	public function get_action_label()
	{
		$router= $this->_controller->router;
		$action= $router->method;
		$types= $this->get_action_type();
		
		if( array_key_exists($action, $types) ){
			return $types[$action];
			
		} else {
			return FALSE;
		}
	}
	
	public function get_data_change($model)
	{
		$router= $this->_controller->router;

		// login, logout 方法无需传入模型数据
		if( $router->method=='login' ){
			return '登陆成功';
			
		} else if( $router->method=='logout' ){
			return '退出成功';
			
		} else if( $router->method=='profile_post' ){
			return '修改个人资料/密码';
			
		} else if( ! $model instanceof MY_Model ){
			throw new Exception('资源模型未能被识别。');
			return FALSE;
		}
		$desc= '';
		$change_array= $model->m_change();
		$attributes= $model->attribute_labels();
		foreach ($change_array as $k=> $v){
			$desc.= "'{$attributes[$k]}'：'". $v['org']. "'=>'". $v['cur']. "';\n ";
		}
		return $desc;
	}
	
	public function get_module()
	{
		if($segments= $this->_controller->router->uri->segments){
			$module= $segments[1];
			return $module;
			
		} else {
			return '';
		}
	}
	
	/**
	 * 方法运行在controller中，用法： EA_behavior_log::inst()->record($this, $model); 
	 * @param MY_Admin $controller
	 * @param MY_Model $model
	 * @param Priv_admin $admin
	 * @throws Exception
	 * @return boolean
	 */
	public function record($profile, $model)
	{
		$controller= &get_instance();
		$this->_controller= $controller;
		
		$data= array();
		
		$data['action_type']= $this->get_action_label();
		if( !$data['action_type'] ){
			throw new Exception('该类型行为操作未能被识别。');
			return FALSE;
		}

		if($profile ){
		    if($model && $pk= $model->table_primary_key()){
		        $pk= $model->table_primary_key();
		        $data['primary_key']= $model->m_get($pk);
		    }
			$data['admin_id']= $profile['admin_id'];
			$data['action_info']= $this->get_data_change($model);
			$data['action_controller']= get_class($controller);
			$data['action_model']= ($model)? get_class($model): NULL;
			$data['module']= $this->get_module();
			$data['remote_ip']= ip2long($this->_controller->input->ip_address());
			$data['action_time']= date('Y-m-d H:i:s');
			
			$model= $this->get_log_model();
			$result= $model->m_sets($data)->m_save();
		}
		
		return $result;//静止返回
	}
	
}
