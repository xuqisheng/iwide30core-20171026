<?php

namespace App\services\soma\consumer;

use App\services\BaseService;
use App\services\Result;

/**
 * Class ConsumerService
 * @package    App\services\soma
 *
 * @author     fengzhongcheng <fengzhongcheng@mofly.cn>
 */
class ConsumerService extends BaseService
{

    const BATCH_CONSUMER_TYPE_ORDER = 'order';
    const BATCH_CONSUMER_TYPE_GIFT  = 'gift';

    public function __construct()
    {
        $this->getCI()->load->model('soma/Consumer_code_model');
        $this->getCI()->load->model('soma/Consumer_order_model');
    }

    /**
     * Gets the instance.
     *
     * @return     ConsumerService
     *
     * @author     fengzhongcheng <fengzhongcheng@mofly.cn>
     */
    public static function getInstance()
    {
        return self::init(self::class);
    }

    /**
     * 获取批量核销类型转义数组
     *
     * @return     array  批量核销类型转义数组.
     *
     * @author     fengzhongcheng <fengzhongcheng@mofly.cn>
     */
    public function getBatchConsumerTypeLabel()
    {
        return array(
            self::BATCH_CONSUMER_TYPE_ORDER => '订单单号',
            self::BATCH_CONSUMER_TYPE_GIFT  => '转赠单号',
        );
    }

    /**
     * 校验批量核销表单输入值
     *
     * @param      array   $data   表单数据
     *
     * @return     Result  校验结果
     *
     * @author     fengzhongcheng <fengzhongcheng@mofly.cn>
     */
    public function vaildBatchConsumerEditForm($data)
    {
        $this->getCI()->load->library('form_validation');
        $form_validation = $this->getCI()->form_validation;
        $typeList = implode(',', array_keys($this->getBatchConsumerTypeLabel()));

        $form_validation->set_data($data);
        $form_validation->set_rules(
            'type',
            '核销类型',
            "required|in_list[{$typeList}]",
            array(
                'required' => '核销类型不能为空!',
                'in_list'  => '核销类型非法',
            )
        );
        $form_validation->set_rules(
            'order_id',
            '单号',
            'required',
            array('required' => '单号不能为空!')
        );

        if (isset($data['qty'])) {
            $form_validation->set_rules(
                'qty',
                '核销数量',
                'required|greater_than[0]',
                array(
                    'required'     => '核销数量不能为空!',
                    'greater_than' => '核销数量必须为整数，并且数值需要大于0'
                )
            );
        }

        $result = new Result();
        if ($form_validation->run()) {
            $result->setStatus(Result::STATUS_OK);
        } else {
            $result->setMessage($form_validation->error_string());
        }

        return $result;
    }

    /**
     * 获取订单资产 1.订单中的inter_id与提供的inter_id不符合，返回空数据
     * 2.通过订单get_order_asset()方法获取到的信息中，items字段内容为空的话返回空数据（证明没有资产）
     * 3.获取到订单资产信息后，比对订单的openid与资产中的openid，仅返回匹配的数据
     * 4.如果获取到的资产信息中，对应有多条记录的情况下，将多个资产记录的资产数量汇总（来回转赠会产生多个记录）
     * 5.组合商品主订单需要获取到子商品对应的资产
     *
     * @param      string  $order_id  订单id
     * @param      string  $inter_id  公众号id
     *
     * @return     Result  订单资产信息.
     *
     * @author     fengzhongcheng <fengzhongcheng@mofly.cn>
     */
    public function getOrderAsset($order_id, $inter_id)
    {
        $result = new Result();

        $this->getCI()->load->model('soma/sales_order_model');
        $order = $this->getCI()->sales_order_model->load($order_id);

        if ($order && $order->m_get('inter_id') == $inter_id) {

            $assets = array();
            $order_info = $order->get_order_asset($order->m_get('business'), $inter_id );
            $order_info['nickname']   = $order_info['openid'];
            $order_info['search_oid'] = $order_id;

            $combine_assets = $order->getCombineOrderAssets($inter_id);

            if (!empty($combine_assets)) {
                $order_info['combine_main_order'] = true;
                foreach ($combine_assets as $item) {
                    $assets[ $item['item_id'] ] = $item;
                }
            } else {
                $order_info['combine_main_order'] = false;
                if (!empty($order_info['items'])) {
                    foreach ($order_info['items'] as $item) {
                        if ($item['openid'] == $order_info['openid']) {
                            $assets[ $item['item_id'] ] = $item;
                        }
                    }
                }
            }

            if (!empty($assets)) {
                $result->setStatus(Result::STATUS_OK);
                $result->setData(array('assets' => $assets, 'order' => $order_info));
            } else {
                $result->setMessage('该订单无可用资产信息!');
            }
        } else {
            $result->setMessage('无该订单信息!');
        }

        return $result;
    }
    
    /**
     * 获取赠送资产
     *
     * @param      string  $order_id  礼物id
     * @param      string  $inter_id  公众号id
     *
     * @return     Result  礼物资产.
     *
     * @author     fengzhongcheng <fengzhongcheng@mofly.cn>
     */
    public function getGiftAsset($order_id, $inter_id)
    {
        $result = new Result();

        $this->getCI()->load->model('soma/gift_order_model');
        $gift = $this->getCI()->gift_order_model->load($order_id);

        if ($gift && $gift->m_get('inter_id') == $inter_id) {

            // 转赠细单中的资产id为上一个资产id，直接到资产细单表中获取最新的资产信息
            $assets = array();
            $gift_info = $gift->m_data();
            $gift_info['nickname']   = $gift_info['openid_received'];
            $gift_info['search_oid'] = $order_id;

            $this->getCI()->load->model('soma/asset_item_package_model', 'ai_model');
            $asset_item = $this->getCI()
                ->ai_model->get_order_items_byGiftids(
                    $order_id,
                    $gift->m_get('business'),
                    $inter_id
                );

            if (!empty($asset_item)) {
                foreach ($asset_item as $item) {
                    if ($item['openid'] == $gift_info['openid_received']) {
                        $assets[ $item['item_id'] ] = $item;
                    }
                }
            }

            if (!empty($assets)) {
                $result->setStatus(Result::STATUS_OK);
                $result->setData(array('assets' => $assets, 'gift' => $gift_info));
            } else {
                $result->setMessage('该转赠订单无可用资产信息!');
            }

        } else {
            $result->setMessage('无该转赠订单信息!');
        }

        return $result;
    }

    /**
     * 将资产按照产品维度合并起来，形成一个产品一个资产记录的形式
     *
     * @param      array  $asset  合并前的资产信息
     *
     * @return     array  合并后的资产信息
     *
     * @author     fengzhongcheng <fengzhongcheng@mofly.cn>
     */
    public function mergeBatchEditAssetInfo($asset)
    {
        $merge_asset = array();
        foreach ($asset as $item) {
            if (empty($merge_asset[ $item['product_id'] ])) {
                $merge_asset[ $item['product_id'] ] = $item;
            } else {
                $merge_asset[ $item['product_id'] ]['qty'] += $item['qty'];
            }
        }
        return $merge_asset;
    }

    /**
     * 通过资产id获取数个可用的核销码，不传数量则获取全部核销码
     *
     * @param      string  $inter_id  公众号id
     * @param      array   $aiids     资产细单id数组
     * @param      int     $qty       核销数量
     *
     * @return     Result  核销码数组
     *
     * @author     fengzhongcheng <fengzhongcheng@mofly.cn>
     */
    public function getConsumerCodeByAssetItemIds($inter_id, $aiids, $qty = null)
    {
        $model     = $this->getCI()->Consumer_code_model;
        $filter    = array('status' => $model::STATUS_SIGNED);
        $code_list = $model->get_code_by_assetItemIds($aiids, $inter_id, $filter, $qty);

        $result = new Result();
        if($qty != null && $qty == count($code_list)) {
            $result->setStatus(Result::STATUS_OK);
            $result->setData($code_list);
        } else {
            $result->setMessage('没有足够的核销码!');
        }
        return $result;
    }

    /**
     * 批量核销
     *
     * @param      string  $inter_id   公众号id
     * @param      array   $code_list  核销码信息列表
     * @param      string  $op_user    核销人
     * @param      int     $method     核销方法
     * @param      string  $business   业务类型
     *
     * @return     Result  ( description_of_the_return_value )
     *
     * @author     fengzhongcheng <fengzhongcheng@mofly.cn>
     */
    public function batchConsumer(
        $inter_id,
        $code_list,
        $op_user,
        $method = \Consumer_order_model::CONSUME_METHOD_SERVICE,
        $business = 'package')
    {
        $result    = new Result();    
        $aiids     = array();   
        $batch_res = true;

        $this->getCI()->soma_db_conn->trans_start();

        foreach ($code_list as $item) {
            $res = $this->getCI()->Consumer_order_model
                ->direct_consumer($item['code'], $op_user, $method, $inter_id, $business);

            if (empty($res['status'])
                || $res['status'] != \Soma_base::STATUS_TRUE) {
                $batch_res = false;
            }
            
            if (!in_array($item['asset_item_id'], $aiids)) {
                $aiids[] = $item['asset_item_id'];
            }
        }

        if ($batch_res) {
            $result->setStatus(Result::STATUS_OK);
            $result->setData($aiids);
            $this->getCI()->soma_db_conn->trans_complete();
        } else {
            $this->getCI()->soma_db_conn->rollback();
            $result->setMessage('批量核销失败!');
        }

        return $result;
    }

    /**
     * 发送批量核销的模板消息
     *
     * @param      string  $inter_id  公众号id
     * @param      string  $openid    用户openid
     * @param      array   $aiids     资产细单id
     * @param      string  $business  业务类型
     *
     * @author     fengzhongcheng <fengzhongcheng@mofly.cn>
     */
    public function sendBatchConsumerWxTemplateMessage(
        $inter_id,
        $openid,
        $aiids,
        $business = 'package')
    {
        $this->getCI()->load->model('soma/Message_wxtemp_template_model');
        $this->getCI()->load->model('soma/Asset_customer_model');

        foreach ($aiids as $item_id) {

            $this->getCI()->Asset_customer_model->code = null;
            $this->getCI()->Asset_customer_model->asset_item_id = $item_id;
            
            $this->getCI()->Message_wxtemp_template_model
                ->send_template_by_consume_or_booking_success(
                    \Message_wxtemp_template_model::TEMPLATE_CONSUMER_SUCCESS,
                    $this->getCI()->Asset_customer_model,
                    $openid,
                    $inter_id,
                    $business
                );

        }
    }

}
